{
  "address": "0x640Ec55454887d9fA69CEFB95110e2B9717eE18a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOESNT_EXIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXISTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_idCatastro",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_hashJsonToken",
          "type": "string"
        }
      ],
      "name": "addREAT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reatdata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "REATid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "idCatastro",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hashJsonToken",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "hashJsonDoc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exists",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_newHashJsonDoc",
          "type": "uint128"
        }
      ],
      "name": "updateHashJsonDoc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "updateMasterUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc841c74045d48d54eca9c1c13721c91354f1bddb50bbe2a7060ad27d3c83a5b",
  "receipt": {
    "to": null,
    "from": "0x2B65cd345Ad3bf6dA7b497d67b3a8cFE7b9a3500",
    "contractAddress": "0x640Ec55454887d9fA69CEFB95110e2B9717eE18a",
    "transactionIndex": 61,
    "gasUsed": "3485637",
    "logsBloom": "0x
    "blockHash": "0x94bb8639b007ad861d330cf542bb42425e599afa650343803ba1e5742a59b3be",
    "transactionHash": "0xcc841c74045d48d54eca9c1c13721c91354f1bddb50bbe2a7060ad27d3c83a5b",
    "logs": [
      {
        "transactionIndex": 61,
        "blockNumber": 10811352,
        "transactionHash": "0xcc841c74045d48d54eca9c1c13721c91354f1bddb50bbe2a7060ad27d3c83a5b",
        "address": "0x640Ec55454887d9fA69CEFB95110e2B9717eE18a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002b65cd345ad3bf6da7b497d67b3a8cfe7b9a3500"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0x94bb8639b007ad861d330cf542bb42425e599afa650343803ba1e5742a59b3be"
      }
    ],
    "blockNumber": 10811352,
    "cumulativeGasUsed": "24425701",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "d1ee4287320f7a91da1e8e24d97ac521",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOESNT_EXIST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXISTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_idCatastro\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hashJsonToken\",\"type\":\"string\"}],\"name\":\"addREAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reatdata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"REATid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"idCatastro\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashJsonToken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hashJsonDoc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exists\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_newHashJsonDoc\",\"type\":\"uint128\"}],\"name\":\"updateHashJsonDoc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"updateMasterUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addREAT(string,string)\":{\"details\":\"addREAT() mints the token and updates the token counter\",\"params\":{\"_hashJsonToken\":\"is the keccak256 of the property metadata\",\"_idCatastro\":\"is the ID to be provided by the Catastro office\"},\"returns\":{\"_0\":\"ID of the struct REATdata that got created/updated\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getUri(uint256)\":{\"details\":\"Function to get the URI by passing the tokenId\",\"params\":{\"_tokenId\":\"variable passed to assign the ID, that is the token type \"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateHashJsonDoc(uint256,uint128)\":{\"details\":\"This function will update the json hash whenever there are updates in property docs\",\"params\":{\"_id\":\"used to search in the reatdata mapping to find the struct that will be updated\",\"_newHashJsonDoc\":\"is the new hash that will replace the hashJsonDoc inside the struct reatdata\"}},\"updateMasterUri(string)\":{\"details\":\"updateMasterUri() sets a new URI for the token type passed as argumentwhere is the OWNER defined ?\",\"params\":{\"uri_\":\"is the ID that will be set for the token type\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"reatdata\":{\"details\":\"a mapping to index all REATData structs created in the contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addREAT(string,string)\":{\"notice\":\"why are we passing the parameters as calldata ?token minted with URI property \\\"hashJsonDoc\\\" empty. It'll be added later on\"},\"getUri(uint256)\":{\"notice\":\"it takes the base URI and concatenates the _tokenId and adds \\\".json\\\" in the end\"},\"updateMasterUri(string)\":{\"notice\":\"a new token type is created for every single propertyinherited modifier \\\"nonReentrant\\\" from ReentrancyGuard contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterREAT_EG_ext_Savings.sol\":\"MasterREAT_EG_ext_Savings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5efa2a2ed44af15fd5bec8c43b45cb26fe6cb68671fea151e6afcfed66ed2672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MasterREAT_EG_ext_Savings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\n\\r\\n\\r\\n// // Working in progress\\r\\n// 1) Fix the function hashJsonDoc() = it expects a UINT128 and I'm sending a 256 bits test variable\\r\\n\\r\\ncontract MasterREAT_EG_ext_Savings is ERC1155, Ownable, Pausable, ReentrancyGuard {\\r\\n    string baseUri = \\\"https://www.realestatechain.es/api/item/\\\";\\r\\n    uint256 public constant DOESNT_EXIST = 1;\\r\\n    uint256 public constant EXISTS = 2;\\r\\n    address private _owner = msg.sender;\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _reatAutoId;\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev The Struct REATData stores all metadata for every token\\r\\n        * @param REATid acts as the tokenID in the standard ERC-1155\\r\\n        * @param idCatastr is the property id provided by the Catastro office\\r\\n        * @param hashJsonToken created by doing keccak256 on json of property metadata\\r\\n        * @param hashJsonDoc created by doing keccak256 on json of all docs submitted at Catastro office    \\r\\n        * @param exists replaced \\\"bool\\\" with \\\"uint128\\\" because it consumes 5k less gas\\r\\n        * @notice \\\"exists\\\" is initialized with 1 instead of 0 to save 20k gas\\r\\n     */\\r\\n    struct REATData {\\r\\n        uint256 REATid;\\r\\n        string idCatastro;\\r\\n        string hashJsonToken;\\r\\n        uint256 hashJsonDoc; // uint256 - cheaper than string and more descriptive\\r\\n        uint256 exists; // uint256 - it's cheaper than a bool\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev a mapping to index all REATData structs created in the contract\\r\\n     */\\r\\n    mapping(uint256 => REATData) public reatdata;\\r\\n\\r\\n    constructor()\\r\\n        ERC1155(\\\"https://www.realestatechain.es/api/item/{id}.json\\\")\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n        * @dev updateMasterUri() sets a new URI for the token type passed as argument\\r\\n        * @dev where is the OWNER defined ?\\r\\n        * @param uri_ is the ID that will be set for the token type\\r\\n        * @notice a new token type is created for every single property\\r\\n        * @notice inherited modifier \\\"nonReentrant\\\" from ReentrancyGuard contract\\r\\n     */\\r\\n    function updateMasterUri(string memory uri_) public onlyOwner nonReentrant {\\r\\n        _setURI(uri_);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev Function to get the URI by passing the tokenId\\r\\n        * @param _tokenId variable passed to assign the ID, that is the token type \\r\\n        * @notice it takes the base URI and concatenates the _tokenId and adds \\\".json\\\" in the end\\r\\n     */\\r\\n    function getUri(uint256 _tokenId) public view returns(string memory) {\\r\\n\\r\\n        return string(\\r\\n            abi.encodePacked(\\r\\n                baseUri,\\r\\n                Strings.toString(_tokenId),\\r\\n                \\\".json\\\"\\r\\n            )\\r\\n        );\\r\\n    \\r\\n    }\\r\\n    \\r\\n    /**\\r\\n        * @dev addREAT() mints the token and updates the token counter\\r\\n        * @param _idCatastro is the ID to be provided by the Catastro office\\r\\n        * @param _hashJsonToken is the keccak256 of the property metadata\\r\\n        * @notice why are we passing the parameters as calldata ?\\r\\n        * @notice token minted with URI property \\\"hashJsonDoc\\\" empty. It'll be added later on\\r\\n        * @return ID of the struct REATdata that got created/updated\\r\\n     */\\r\\n    function addREAT(\\r\\n        string calldata _idCatastro,\\r\\n        string calldata _hashJsonToken\\r\\n    ) public onlyOwner nonReentrant returns (uint256) {\\r\\n        _reatAutoId.increment();\\r\\n        uint256 newREATId = _reatAutoId.current();\\r\\n        _mint(msg.sender, newREATId, 1, \\\"\\\");\\r\\n\\r\\n        reatdata[newREATId] = REATData(\\r\\n            newREATId,\\r\\n            _idCatastro,\\r\\n            _hashJsonToken,\\r\\n            DOESNT_EXIST,\\r\\n            EXISTS\\r\\n        );\\r\\n        return newREATId;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev This function will update the json hash whenever there are updates in property docs\\r\\n        * @param _id used to search in the reatdata mapping to find the struct that will be updated\\r\\n        * @param _newHashJsonDoc is the new hash that will replace the hashJsonDoc inside the struct reatdata\\r\\n     */\\r\\n    function updateHashJsonDoc(uint256 _id, uint128 _newHashJsonDoc)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(reatdata[_id].exists == EXISTS);\\r\\n        reatdata[_id].hashJsonDoc = _newHashJsonDoc;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdaadca3dda136feb9712fb20d2c26b64e409a995eb2b2ed902a80cc8115581ee\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405260405180606001604052806028815260200162003d83602891396005908051906020019062000035929190620001e4565b5033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200008457600080fd5b5060405180606001604052806031815260200162003dab60319139620000b081620000fa60201b60201c565b50620000d1620000c56200011660201b60201c565b6200011e60201b60201c565b6000600360146101000a81548160ff0219169083151502179055506001600481905550620002f9565b806002908051906020019062000112929190620001e4565b5050565b600033905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001f290620002c3565b90600052602060002090601f01602090048101928262000216576000855562000262565b82601f106200023157805160ff191683800117855562000262565b8280016001018555821562000262579182015b828111156200026157825182559160200191906001019062000244565b5b50905062000271919062000275565b5090565b5b808211156200029057600081600090555060010162000276565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002dc57607f821691505b60208210811415620002f357620002f262000294565b5b50919050565b613a7a80620003096000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c80638da5cb5b116100ad578063c68fb65b11610071578063c68fb65b1461031f578063da0544aa1461033b578063e985e9c51461036b578063f242432a1461039b578063f2fde38b146103b757610120565b80638da5cb5b1461027b5780639005c749146102995780639dcbf876146102b7578063a22cb465146102d3578063acbe9dd6146102ef57610120565b80633d0873fc116100f45780633d0873fc146101d15780634e1273f4146101ef5780635c975abb1461021f5780635d9a8a451461023d578063715018a61461027157610120565b8062fdd58e1461012557806301ffc9a7146101555780630e89341c146101855780632eb2c2d6146101b5575b600080fd5b61013f600480360381019061013a919061216b565b6103d3565b60405161014c91906121ba565b60405180910390f35b61016f600480360381019061016a919061222d565b61049c565b60405161017c9190612275565b60405180910390f35b61019f600480360381019061019a9190612290565b61057e565b6040516101ac9190612356565b60405180910390f35b6101cf60048036038101906101ca9190612575565b610612565b005b6101d96106b3565b6040516101e691906121ba565b60405180910390f35b61020960048036038101906102049190612707565b6106b8565b604051610216919061283d565b60405180910390f35b6102276107d1565b6040516102349190612275565b60405180910390f35b61025760048036038101906102529190612290565b6107e8565b60405161026895949392919061285f565b60405180910390f35b61027961092e565b005b6102836109b6565b60405161029091906128cf565b60405180910390f35b6102a16109e0565b6040516102ae91906121ba565b60405180910390f35b6102d160048036038101906102cc919061298b565b6109e5565b005b6102ed60048036038101906102e89190612a00565b610ac3565b005b61030960048036038101906103049190612a9b565b610ad9565b60405161031691906121ba565b60405180910390f35b61033960048036038101906103349190612b64565b610d0c565b005b61035560048036038101906103509190612290565b610ddc565b6040516103629190612356565b60405180910390f35b61038560048036038101906103809190612ba4565b610e10565b6040516103929190612275565b60405180910390f35b6103b560048036038101906103b09190612be4565b610ea4565b005b6103d160048036038101906103cc9190612c7b565b610f45565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b90612d1a565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061056757507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061057757506105768261103d565b5b9050919050565b60606002805461058d90612d69565b80601f01602080910402602001604051908101604052809291908181526020018280546105b990612d69565b80156106065780601f106105db57610100808354040283529160200191610606565b820191906000526020600020905b8154815290600101906020018083116105e957829003601f168201915b50505050509050919050565b61061a6110a7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610660575061065f8561065a6110a7565b610e10565b5b61069f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069690612e0d565b60405180910390fd5b6106ac85858585856110af565b5050505050565b600181565b606081518351146106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f590612e9f565b60405180910390fd5b6000835167ffffffffffffffff81111561071b5761071a61237d565b5b6040519080825280602002602001820160405280156107495781602001602082028036833780820191505090505b50905060005b84518110156107c65761079685828151811061076e5761076d612ebf565b5b602002602001015185838151811061078957610788612ebf565b5b60200260200101516103d3565b8282815181106107a9576107a8612ebf565b5b602002602001018181525050806107bf90612f1d565b905061074f565b508091505092915050565b6000600360149054906101000a900460ff16905090565b600860205280600052604060002060009150905080600001549080600101805461081190612d69565b80601f016020809104026020016040519081016040528092919081815260200182805461083d90612d69565b801561088a5780601f1061085f5761010080835404028352916020019161088a565b820191906000526020600020905b81548152906001019060200180831161086d57829003601f168201915b50505050509080600201805461089f90612d69565b80601f01602080910402602001604051908101604052809291908181526020018280546108cb90612d69565b80156109185780601f106108ed57610100808354040283529160200191610918565b820191906000526020600020905b8154815290600101906020018083116108fb57829003601f168201915b5050505050908060030154908060040154905085565b6109366110a7565b73ffffffffffffffffffffffffffffffffffffffff166109546109b6565b73ffffffffffffffffffffffffffffffffffffffff16146109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a190612fb2565b60405180910390fd5b6109b460006113c3565b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600281565b6109ed6110a7565b73ffffffffffffffffffffffffffffffffffffffff16610a0b6109b6565b73ffffffffffffffffffffffffffffffffffffffff1614610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5890612fb2565b60405180910390fd5b60026004541415610aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9e9061301e565b60405180910390fd5b6002600481905550610ab881611489565b600160048190555050565b610ad5610ace6110a7565b83836114a3565b5050565b6000610ae36110a7565b73ffffffffffffffffffffffffffffffffffffffff16610b016109b6565b73ffffffffffffffffffffffffffffffffffffffff1614610b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4e90612fb2565b60405180910390fd5b60026004541415610b9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b949061301e565b60405180910390fd5b6002600481905550610baf6007611610565b6000610bbb6007611626565b9050610bd93382600160405180602001604052806000815250611634565b6040518060a0016040528082815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160018152602001600281525060086000838152602001908152602001600020600082015181600001556020820151816001019080519060200190610cc3929190612020565b506040820151816002019080519060200190610ce0929190612020565b506060820151816003015560808201518160040155905050809150506001600481905550949350505050565b610d146110a7565b73ffffffffffffffffffffffffffffffffffffffff16610d326109b6565b73ffffffffffffffffffffffffffffffffffffffff1614610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90612fb2565b60405180910390fd5b6002600860008481526020019081526020016000206004015414610dab57600080fd5b806fffffffffffffffffffffffffffffffff1660086000848152602001908152602001600020600301819055505050565b60606005610de9836117ca565b604051602001610dfa92919061315a565b6040516020818303038152906040529050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610eac6110a7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ef25750610ef185610eec6110a7565b610e10565b5b610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f28906131fb565b60405180910390fd5b610f3e858585858561192b565b5050505050565b610f4d6110a7565b73ffffffffffffffffffffffffffffffffffffffff16610f6b6109b6565b73ffffffffffffffffffffffffffffffffffffffff1614610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb890612fb2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611031576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110289061328d565b60405180910390fd5b61103a816113c3565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b81518351146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea9061331f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a906133b1565b60405180910390fd5b600061116d6110a7565b905061117d818787878787611bad565b60005b845181101561132e57600085828151811061119e5761119d612ebf565b5b6020026020010151905060008583815181106111bd576111bc612ebf565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561125e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125590613443565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113139190613463565b925050819055505050508061132790612f1d565b9050611180565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113a59291906134b9565b60405180910390a46113bb818787878787611bb5565b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806002908051906020019061149f929190612020565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150990613562565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116039190612275565b60405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156116a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169b906135f4565b60405180910390fd5b60006116ae6110a7565b90506116cf816000876116c088611d9c565b6116c988611d9c565b87611bad565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461172e9190613463565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516117ac929190613614565b60405180910390a46117c381600087878787611e16565b5050505050565b60606000821415611812576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611926565b600082905060005b6000821461184457808061182d90612f1d565b915050600a8261183d919061366c565b915061181a565b60008167ffffffffffffffff8111156118605761185f61237d565b5b6040519080825280601f01601f1916602001820160405280156118925781602001600182028036833780820191505090505b5090505b6000851461191f576001826118ab919061369d565b9150600a856118ba91906136d1565b60306118c69190613463565b60f81b8183815181106118dc576118db612ebf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611918919061366c565b9450611896565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561199b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611992906133b1565b60405180910390fd5b60006119a56110a7565b90506119c58187876119b688611d9c565b6119bf88611d9c565b87611bad565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015611a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5390613443565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b119190613463565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051611b8e929190613614565b60405180910390a4611ba4828888888888611e16565b50505050505050565b505050505050565b611bd48473ffffffffffffffffffffffffffffffffffffffff16611ffd565b15611d94578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611c1a959493929190613757565b602060405180830381600087803b158015611c3457600080fd5b505af1925050508015611c6557506040513d601f19601f82011682018060405250810190611c6291906137d4565b60015b611d0b57611c7161380e565b806308c379a01415611cce5750611c86613830565b80611c915750611cd0565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc59190612356565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0290613938565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611d92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d89906139ca565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611dbb57611dba61237d565b5b604051908082528060200260200182016040528015611de95781602001602082028036833780820191505090505b5090508281600081518110611e0157611e00612ebf565b5b60200260200101818152505080915050919050565b611e358473ffffffffffffffffffffffffffffffffffffffff16611ffd565b15611ff5578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611e7b9594939291906139ea565b602060405180830381600087803b158015611e9557600080fd5b505af1925050508015611ec657506040513d601f19601f82011682018060405250810190611ec391906137d4565b60015b611f6c57611ed261380e565b806308c379a01415611f2f5750611ee7613830565b80611ef25750611f31565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f269190612356565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6390613938565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fea906139ca565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461202c90612d69565b90600052602060002090601f01602090048101928261204e5760008555612095565b82601f1061206757805160ff1916838001178555612095565b82800160010185558215612095579182015b82811115612094578251825591602001919060010190612079565b5b5090506120a291906120a6565b5090565b5b808211156120bf5760008160009055506001016120a7565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612102826120d7565b9050919050565b612112816120f7565b811461211d57600080fd5b50565b60008135905061212f81612109565b92915050565b6000819050919050565b61214881612135565b811461215357600080fd5b50565b6000813590506121658161213f565b92915050565b60008060408385031215612182576121816120cd565b5b600061219085828601612120565b92505060206121a185828601612156565b9150509250929050565b6121b481612135565b82525050565b60006020820190506121cf60008301846121ab565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61220a816121d5565b811461221557600080fd5b50565b60008135905061222781612201565b92915050565b600060208284031215612243576122426120cd565b5b600061225184828501612218565b91505092915050565b60008115159050919050565b61226f8161225a565b82525050565b600060208201905061228a6000830184612266565b92915050565b6000602082840312156122a6576122a56120cd565b5b60006122b484828501612156565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122f75780820151818401526020810190506122dc565b83811115612306576000848401525b50505050565b6000601f19601f8301169050919050565b6000612328826122bd565b61233281856122c8565b93506123428185602086016122d9565b61234b8161230c565b840191505092915050565b60006020820190508181036000830152612370818461231d565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123b58261230c565b810181811067ffffffffffffffff821117156123d4576123d361237d565b5b80604052505050565b60006123e76120c3565b90506123f382826123ac565b919050565b600067ffffffffffffffff8211156124135761241261237d565b5b602082029050602081019050919050565b600080fd5b600061243c612437846123f8565b6123dd565b9050808382526020820190506020840283018581111561245f5761245e612424565b5b835b8181101561248857806124748882612156565b845260208401935050602081019050612461565b5050509392505050565b600082601f8301126124a7576124a6612378565b5b81356124b7848260208601612429565b91505092915050565b600080fd5b600067ffffffffffffffff8211156124e0576124df61237d565b5b6124e98261230c565b9050602081019050919050565b82818337600083830152505050565b6000612518612513846124c5565b6123dd565b905082815260208101848484011115612534576125336124c0565b5b61253f8482856124f6565b509392505050565b600082601f83011261255c5761255b612378565b5b813561256c848260208601612505565b91505092915050565b600080600080600060a08688031215612591576125906120cd565b5b600061259f88828901612120565b95505060206125b088828901612120565b945050604086013567ffffffffffffffff8111156125d1576125d06120d2565b5b6125dd88828901612492565b935050606086013567ffffffffffffffff8111156125fe576125fd6120d2565b5b61260a88828901612492565b925050608086013567ffffffffffffffff81111561262b5761262a6120d2565b5b61263788828901612547565b9150509295509295909350565b600067ffffffffffffffff82111561265f5761265e61237d565b5b602082029050602081019050919050565b600061268361267e84612644565b6123dd565b905080838252602082019050602084028301858111156126a6576126a5612424565b5b835b818110156126cf57806126bb8882612120565b8452602084019350506020810190506126a8565b5050509392505050565b600082601f8301126126ee576126ed612378565b5b81356126fe848260208601612670565b91505092915050565b6000806040838503121561271e5761271d6120cd565b5b600083013567ffffffffffffffff81111561273c5761273b6120d2565b5b612748858286016126d9565b925050602083013567ffffffffffffffff811115612769576127686120d2565b5b61277585828601612492565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6127b481612135565b82525050565b60006127c683836127ab565b60208301905092915050565b6000602082019050919050565b60006127ea8261277f565b6127f4818561278a565b93506127ff8361279b565b8060005b8381101561283057815161281788826127ba565b9750612822836127d2565b925050600181019050612803565b5085935050505092915050565b6000602082019050818103600083015261285781846127df565b905092915050565b600060a08201905061287460008301886121ab565b8181036020830152612886818761231d565b9050818103604083015261289a818661231d565b90506128a960608301856121ab565b6128b660808301846121ab565b9695505050505050565b6128c9816120f7565b82525050565b60006020820190506128e460008301846128c0565b92915050565b600067ffffffffffffffff8211156129055761290461237d565b5b61290e8261230c565b9050602081019050919050565b600061292e612929846128ea565b6123dd565b90508281526020810184848401111561294a576129496124c0565b5b6129558482856124f6565b509392505050565b600082601f83011261297257612971612378565b5b813561298284826020860161291b565b91505092915050565b6000602082840312156129a1576129a06120cd565b5b600082013567ffffffffffffffff8111156129bf576129be6120d2565b5b6129cb8482850161295d565b91505092915050565b6129dd8161225a565b81146129e857600080fd5b50565b6000813590506129fa816129d4565b92915050565b60008060408385031215612a1757612a166120cd565b5b6000612a2585828601612120565b9250506020612a36858286016129eb565b9150509250929050565b600080fd5b60008083601f840112612a5b57612a5a612378565b5b8235905067ffffffffffffffff811115612a7857612a77612a40565b5b602083019150836001820283011115612a9457612a93612424565b5b9250929050565b60008060008060408587031215612ab557612ab46120cd565b5b600085013567ffffffffffffffff811115612ad357612ad26120d2565b5b612adf87828801612a45565b9450945050602085013567ffffffffffffffff811115612b0257612b016120d2565b5b612b0e87828801612a45565b925092505092959194509250565b60006fffffffffffffffffffffffffffffffff82169050919050565b612b4181612b1c565b8114612b4c57600080fd5b50565b600081359050612b5e81612b38565b92915050565b60008060408385031215612b7b57612b7a6120cd565b5b6000612b8985828601612156565b9250506020612b9a85828601612b4f565b9150509250929050565b60008060408385031215612bbb57612bba6120cd565b5b6000612bc985828601612120565b9250506020612bda85828601612120565b9150509250929050565b600080600080600060a08688031215612c0057612bff6120cd565b5b6000612c0e88828901612120565b9550506020612c1f88828901612120565b9450506040612c3088828901612156565b9350506060612c4188828901612156565b925050608086013567ffffffffffffffff811115612c6257612c616120d2565b5b612c6e88828901612547565b9150509295509295909350565b600060208284031215612c9157612c906120cd565b5b6000612c9f84828501612120565b91505092915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000612d04602b836122c8565b9150612d0f82612ca8565b604082019050919050565b60006020820190508181036000830152612d3381612cf7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d8157607f821691505b60208210811415612d9557612d94612d3a565b5b50919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000612df76032836122c8565b9150612e0282612d9b565b604082019050919050565b60006020820190508181036000830152612e2681612dea565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612e896029836122c8565b9150612e9482612e2d565b604082019050919050565b60006020820190508181036000830152612eb881612e7c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f2882612135565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f5b57612f5a612eee565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612f9c6020836122c8565b9150612fa782612f66565b602082019050919050565b60006020820190508181036000830152612fcb81612f8f565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613008601f836122c8565b915061301382612fd2565b602082019050919050565b6000602082019050818103600083015261303781612ffb565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461306b81612d69565b613075818661303e565b9450600182166000811461309057600181146130a1576130d4565b60ff198316865281860193506130d4565b6130aa85613049565b60005b838110156130cc578154818901526001820191506020810190506130ad565b838801955050505b50505092915050565b60006130e8826122bd565b6130f2818561303e565b93506131028185602086016122d9565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b600061314460058361303e565b915061314f8261310e565b600582019050919050565b6000613166828561305e565b915061317282846130dd565b915061317d82613137565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b60006131e56029836122c8565b91506131f082613189565b604082019050919050565b60006020820190508181036000830152613214816131d8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006132776026836122c8565b91506132828261321b565b604082019050919050565b600060208201905081810360008301526132a68161326a565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006133096028836122c8565b9150613314826132ad565b604082019050919050565b60006020820190508181036000830152613338816132fc565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061339b6025836122c8565b91506133a68261333f565b604082019050919050565b600060208201905081810360008301526133ca8161338e565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b600061342d602a836122c8565b9150613438826133d1565b604082019050919050565b6000602082019050818103600083015261345c81613420565b9050919050565b600061346e82612135565b915061347983612135565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134ae576134ad612eee565b5b828201905092915050565b600060408201905081810360008301526134d381856127df565b905081810360208301526134e781846127df565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b600061354c6029836122c8565b9150613557826134f0565b604082019050919050565b6000602082019050818103600083015261357b8161353f565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006135de6021836122c8565b91506135e982613582565b604082019050919050565b6000602082019050818103600083015261360d816135d1565b9050919050565b600060408201905061362960008301856121ab565b61363660208301846121ab565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061367782612135565b915061368283612135565b9250826136925761369161363d565b5b828204905092915050565b60006136a882612135565b91506136b383612135565b9250828210156136c6576136c5612eee565b5b828203905092915050565b60006136dc82612135565b91506136e783612135565b9250826136f7576136f661363d565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b600061372982613702565b613733818561370d565b93506137438185602086016122d9565b61374c8161230c565b840191505092915050565b600060a08201905061376c60008301886128c0565b61377960208301876128c0565b818103604083015261378b81866127df565b9050818103606083015261379f81856127df565b905081810360808301526137b3818461371e565b90509695505050505050565b6000815190506137ce81612201565b92915050565b6000602082840312156137ea576137e96120cd565b5b60006137f8848285016137bf565b91505092915050565b60008160e01c9050919050565b600060033d111561382d5760046000803e61382a600051613801565b90505b90565b600060443d1015613840576138c3565b6138486120c3565b60043d036004823e80513d602482011167ffffffffffffffff821117156138705750506138c3565b808201805167ffffffffffffffff81111561388e57505050506138c3565b80602083010160043d0385018111156138ab5750505050506138c3565b6138ba826020018501866123ac565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006139226034836122c8565b915061392d826138c6565b604082019050919050565b6000602082019050818103600083015261395181613915565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006139b46028836122c8565b91506139bf82613958565b604082019050919050565b600060208201905081810360008301526139e3816139a7565b9050919050565b600060a0820190506139ff60008301886128c0565b613a0c60208301876128c0565b613a1960408301866121ab565b613a2660608301856121ab565b8181036080830152613a38818461371e565b9050969550505050505056fea26469706673582212204018cc6bf9f17f0cec8b807d31a4e040d20ebb219f853443711543b8a2236e7364736f6c6343000809003368747470733a2f2f7777772e7265616c657374617465636861696e2e65732f6170692f6974656d2f68747470733a2f2f7777772e7265616c657374617465636861696e2e65732f6170692f6974656d2f7b69647d2e6a736f6e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101205760003560e01c80638da5cb5b116100ad578063c68fb65b11610071578063c68fb65b1461031f578063da0544aa1461033b578063e985e9c51461036b578063f242432a1461039b578063f2fde38b146103b757610120565b80638da5cb5b1461027b5780639005c749146102995780639dcbf876146102b7578063a22cb465146102d3578063acbe9dd6146102ef57610120565b80633d0873fc116100f45780633d0873fc146101d15780634e1273f4146101ef5780635c975abb1461021f5780635d9a8a451461023d578063715018a61461027157610120565b8062fdd58e1461012557806301ffc9a7146101555780630e89341c146101855780632eb2c2d6146101b5575b600080fd5b61013f600480360381019061013a919061216b565b6103d3565b60405161014c91906121ba565b60405180910390f35b61016f600480360381019061016a919061222d565b61049c565b60405161017c9190612275565b60405180910390f35b61019f600480360381019061019a9190612290565b61057e565b6040516101ac9190612356565b60405180910390f35b6101cf60048036038101906101ca9190612575565b610612565b005b6101d96106b3565b6040516101e691906121ba565b60405180910390f35b61020960048036038101906102049190612707565b6106b8565b604051610216919061283d565b60405180910390f35b6102276107d1565b6040516102349190612275565b60405180910390f35b61025760048036038101906102529190612290565b6107e8565b60405161026895949392919061285f565b60405180910390f35b61027961092e565b005b6102836109b6565b60405161029091906128cf565b60405180910390f35b6102a16109e0565b6040516102ae91906121ba565b60405180910390f35b6102d160048036038101906102cc919061298b565b6109e5565b005b6102ed60048036038101906102e89190612a00565b610ac3565b005b61030960048036038101906103049190612a9b565b610ad9565b60405161031691906121ba565b60405180910390f35b61033960048036038101906103349190612b64565b610d0c565b005b61035560048036038101906103509190612290565b610ddc565b6040516103629190612356565b60405180910390f35b61038560048036038101906103809190612ba4565b610e10565b6040516103929190612275565b60405180910390f35b6103b560048036038101906103b09190612be4565b610ea4565b005b6103d160048036038101906103cc9190612c7b565b610f45565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043b90612d1a565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061056757507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061057757506105768261103d565b5b9050919050565b60606002805461058d90612d69565b80601f01602080910402602001604051908101604052809291908181526020018280546105b990612d69565b80156106065780601f106105db57610100808354040283529160200191610606565b820191906000526020600020905b8154815290600101906020018083116105e957829003601f168201915b50505050509050919050565b61061a6110a7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610660575061065f8561065a6110a7565b610e10565b5b61069f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069690612e0d565b60405180910390fd5b6106ac85858585856110af565b5050505050565b600181565b606081518351146106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f590612e9f565b60405180910390fd5b6000835167ffffffffffffffff81111561071b5761071a61237d565b5b6040519080825280602002602001820160405280156107495781602001602082028036833780820191505090505b50905060005b84518110156107c65761079685828151811061076e5761076d612ebf565b5b602002602001015185838151811061078957610788612ebf565b5b60200260200101516103d3565b8282815181106107a9576107a8612ebf565b5b602002602001018181525050806107bf90612f1d565b905061074f565b508091505092915050565b6000600360149054906101000a900460ff16905090565b600860205280600052604060002060009150905080600001549080600101805461081190612d69565b80601f016020809104026020016040519081016040528092919081815260200182805461083d90612d69565b801561088a5780601f1061085f5761010080835404028352916020019161088a565b820191906000526020600020905b81548152906001019060200180831161086d57829003601f168201915b50505050509080600201805461089f90612d69565b80601f01602080910402602001604051908101604052809291908181526020018280546108cb90612d69565b80156109185780601f106108ed57610100808354040283529160200191610918565b820191906000526020600020905b8154815290600101906020018083116108fb57829003601f168201915b5050505050908060030154908060040154905085565b6109366110a7565b73ffffffffffffffffffffffffffffffffffffffff166109546109b6565b73ffffffffffffffffffffffffffffffffffffffff16146109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a190612fb2565b60405180910390fd5b6109b460006113c3565b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600281565b6109ed6110a7565b73ffffffffffffffffffffffffffffffffffffffff16610a0b6109b6565b73ffffffffffffffffffffffffffffffffffffffff1614610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5890612fb2565b60405180910390fd5b60026004541415610aa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9e9061301e565b60405180910390fd5b6002600481905550610ab881611489565b600160048190555050565b610ad5610ace6110a7565b83836114a3565b5050565b6000610ae36110a7565b73ffffffffffffffffffffffffffffffffffffffff16610b016109b6565b73ffffffffffffffffffffffffffffffffffffffff1614610b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4e90612fb2565b60405180910390fd5b60026004541415610b9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b949061301e565b60405180910390fd5b6002600481905550610baf6007611610565b6000610bbb6007611626565b9050610bd93382600160405180602001604052806000815250611634565b6040518060a0016040528082815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160018152602001600281525060086000838152602001908152602001600020600082015181600001556020820151816001019080519060200190610cc3929190612020565b506040820151816002019080519060200190610ce0929190612020565b506060820151816003015560808201518160040155905050809150506001600481905550949350505050565b610d146110a7565b73ffffffffffffffffffffffffffffffffffffffff16610d326109b6565b73ffffffffffffffffffffffffffffffffffffffff1614610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90612fb2565b60405180910390fd5b6002600860008481526020019081526020016000206004015414610dab57600080fd5b806fffffffffffffffffffffffffffffffff1660086000848152602001908152602001600020600301819055505050565b60606005610de9836117ca565b604051602001610dfa92919061315a565b6040516020818303038152906040529050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610eac6110a7565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ef25750610ef185610eec6110a7565b610e10565b5b610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f28906131fb565b60405180910390fd5b610f3e858585858561192b565b5050505050565b610f4d6110a7565b73ffffffffffffffffffffffffffffffffffffffff16610f6b6109b6565b73ffffffffffffffffffffffffffffffffffffffff1614610fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb890612fb2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611031576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110289061328d565b60405180910390fd5b61103a816113c3565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b81518351146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea9061331f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115a906133b1565b60405180910390fd5b600061116d6110a7565b905061117d818787878787611bad565b60005b845181101561132e57600085828151811061119e5761119d612ebf565b5b6020026020010151905060008583815181106111bd576111bc612ebf565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561125e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125590613443565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113139190613463565b925050819055505050508061132790612f1d565b9050611180565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113a59291906134b9565b60405180910390a46113bb818787878787611bb5565b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806002908051906020019061149f929190612020565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150990613562565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116039190612275565b60405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156116a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169b906135f4565b60405180910390fd5b60006116ae6110a7565b90506116cf816000876116c088611d9c565b6116c988611d9c565b87611bad565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461172e9190613463565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516117ac929190613614565b60405180910390a46117c381600087878787611e16565b5050505050565b60606000821415611812576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611926565b600082905060005b6000821461184457808061182d90612f1d565b915050600a8261183d919061366c565b915061181a565b60008167ffffffffffffffff8111156118605761185f61237d565b5b6040519080825280601f01601f1916602001820160405280156118925781602001600182028036833780820191505090505b5090505b6000851461191f576001826118ab919061369d565b9150600a856118ba91906136d1565b60306118c69190613463565b60f81b8183815181106118dc576118db612ebf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611918919061366c565b9450611896565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561199b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611992906133b1565b60405180910390fd5b60006119a56110a7565b90506119c58187876119b688611d9c565b6119bf88611d9c565b87611bad565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015611a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5390613443565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b119190613463565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051611b8e929190613614565b60405180910390a4611ba4828888888888611e16565b50505050505050565b505050505050565b611bd48473ffffffffffffffffffffffffffffffffffffffff16611ffd565b15611d94578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611c1a959493929190613757565b602060405180830381600087803b158015611c3457600080fd5b505af1925050508015611c6557506040513d601f19601f82011682018060405250810190611c6291906137d4565b60015b611d0b57611c7161380e565b806308c379a01415611cce5750611c86613830565b80611c915750611cd0565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc59190612356565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0290613938565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611d92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d89906139ca565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611dbb57611dba61237d565b5b604051908082528060200260200182016040528015611de95781602001602082028036833780820191505090505b5090508281600081518110611e0157611e00612ebf565b5b60200260200101818152505080915050919050565b611e358473ffffffffffffffffffffffffffffffffffffffff16611ffd565b15611ff5578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611e7b9594939291906139ea565b602060405180830381600087803b158015611e9557600080fd5b505af1925050508015611ec657506040513d601f19601f82011682018060405250810190611ec391906137d4565b60015b611f6c57611ed261380e565b806308c379a01415611f2f5750611ee7613830565b80611ef25750611f31565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f269190612356565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6390613938565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fea906139ca565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461202c90612d69565b90600052602060002090601f01602090048101928261204e5760008555612095565b82601f1061206757805160ff1916838001178555612095565b82800160010185558215612095579182015b82811115612094578251825591602001919060010190612079565b5b5090506120a291906120a6565b5090565b5b808211156120bf5760008160009055506001016120a7565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612102826120d7565b9050919050565b612112816120f7565b811461211d57600080fd5b50565b60008135905061212f81612109565b92915050565b6000819050919050565b61214881612135565b811461215357600080fd5b50565b6000813590506121658161213f565b92915050565b60008060408385031215612182576121816120cd565b5b600061219085828601612120565b92505060206121a185828601612156565b9150509250929050565b6121b481612135565b82525050565b60006020820190506121cf60008301846121ab565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61220a816121d5565b811461221557600080fd5b50565b60008135905061222781612201565b92915050565b600060208284031215612243576122426120cd565b5b600061225184828501612218565b91505092915050565b60008115159050919050565b61226f8161225a565b82525050565b600060208201905061228a6000830184612266565b92915050565b6000602082840312156122a6576122a56120cd565b5b60006122b484828501612156565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122f75780820151818401526020810190506122dc565b83811115612306576000848401525b50505050565b6000601f19601f8301169050919050565b6000612328826122bd565b61233281856122c8565b93506123428185602086016122d9565b61234b8161230c565b840191505092915050565b60006020820190508181036000830152612370818461231d565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123b58261230c565b810181811067ffffffffffffffff821117156123d4576123d361237d565b5b80604052505050565b60006123e76120c3565b90506123f382826123ac565b919050565b600067ffffffffffffffff8211156124135761241261237d565b5b602082029050602081019050919050565b600080fd5b600061243c612437846123f8565b6123dd565b9050808382526020820190506020840283018581111561245f5761245e612424565b5b835b8181101561248857806124748882612156565b845260208401935050602081019050612461565b5050509392505050565b600082601f8301126124a7576124a6612378565b5b81356124b7848260208601612429565b91505092915050565b600080fd5b600067ffffffffffffffff8211156124e0576124df61237d565b5b6124e98261230c565b9050602081019050919050565b82818337600083830152505050565b6000612518612513846124c5565b6123dd565b905082815260208101848484011115612534576125336124c0565b5b61253f8482856124f6565b509392505050565b600082601f83011261255c5761255b612378565b5b813561256c848260208601612505565b91505092915050565b600080600080600060a08688031215612591576125906120cd565b5b600061259f88828901612120565b95505060206125b088828901612120565b945050604086013567ffffffffffffffff8111156125d1576125d06120d2565b5b6125dd88828901612492565b935050606086013567ffffffffffffffff8111156125fe576125fd6120d2565b5b61260a88828901612492565b925050608086013567ffffffffffffffff81111561262b5761262a6120d2565b5b61263788828901612547565b9150509295509295909350565b600067ffffffffffffffff82111561265f5761265e61237d565b5b602082029050602081019050919050565b600061268361267e84612644565b6123dd565b905080838252602082019050602084028301858111156126a6576126a5612424565b5b835b818110156126cf57806126bb8882612120565b8452602084019350506020810190506126a8565b5050509392505050565b600082601f8301126126ee576126ed612378565b5b81356126fe848260208601612670565b91505092915050565b6000806040838503121561271e5761271d6120cd565b5b600083013567ffffffffffffffff81111561273c5761273b6120d2565b5b612748858286016126d9565b925050602083013567ffffffffffffffff811115612769576127686120d2565b5b61277585828601612492565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6127b481612135565b82525050565b60006127c683836127ab565b60208301905092915050565b6000602082019050919050565b60006127ea8261277f565b6127f4818561278a565b93506127ff8361279b565b8060005b8381101561283057815161281788826127ba565b9750612822836127d2565b925050600181019050612803565b5085935050505092915050565b6000602082019050818103600083015261285781846127df565b905092915050565b600060a08201905061287460008301886121ab565b8181036020830152612886818761231d565b9050818103604083015261289a818661231d565b90506128a960608301856121ab565b6128b660808301846121ab565b9695505050505050565b6128c9816120f7565b82525050565b60006020820190506128e460008301846128c0565b92915050565b600067ffffffffffffffff8211156129055761290461237d565b5b61290e8261230c565b9050602081019050919050565b600061292e612929846128ea565b6123dd565b90508281526020810184848401111561294a576129496124c0565b5b6129558482856124f6565b509392505050565b600082601f83011261297257612971612378565b5b813561298284826020860161291b565b91505092915050565b6000602082840312156129a1576129a06120cd565b5b600082013567ffffffffffffffff8111156129bf576129be6120d2565b5b6129cb8482850161295d565b91505092915050565b6129dd8161225a565b81146129e857600080fd5b50565b6000813590506129fa816129d4565b92915050565b60008060408385031215612a1757612a166120cd565b5b6000612a2585828601612120565b9250506020612a36858286016129eb565b9150509250929050565b600080fd5b60008083601f840112612a5b57612a5a612378565b5b8235905067ffffffffffffffff811115612a7857612a77612a40565b5b602083019150836001820283011115612a9457612a93612424565b5b9250929050565b60008060008060408587031215612ab557612ab46120cd565b5b600085013567ffffffffffffffff811115612ad357612ad26120d2565b5b612adf87828801612a45565b9450945050602085013567ffffffffffffffff811115612b0257612b016120d2565b5b612b0e87828801612a45565b925092505092959194509250565b60006fffffffffffffffffffffffffffffffff82169050919050565b612b4181612b1c565b8114612b4c57600080fd5b50565b600081359050612b5e81612b38565b92915050565b60008060408385031215612b7b57612b7a6120cd565b5b6000612b8985828601612156565b9250506020612b9a85828601612b4f565b9150509250929050565b60008060408385031215612bbb57612bba6120cd565b5b6000612bc985828601612120565b9250506020612bda85828601612120565b9150509250929050565b600080600080600060a08688031215612c0057612bff6120cd565b5b6000612c0e88828901612120565b9550506020612c1f88828901612120565b9450506040612c3088828901612156565b9350506060612c4188828901612156565b925050608086013567ffffffffffffffff811115612c6257612c616120d2565b5b612c6e88828901612547565b9150509295509295909350565b600060208284031215612c9157612c906120cd565b5b6000612c9f84828501612120565b91505092915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000612d04602b836122c8565b9150612d0f82612ca8565b604082019050919050565b60006020820190508181036000830152612d3381612cf7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d8157607f821691505b60208210811415612d9557612d94612d3a565b5b50919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000612df76032836122c8565b9150612e0282612d9b565b604082019050919050565b60006020820190508181036000830152612e2681612dea565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612e896029836122c8565b9150612e9482612e2d565b604082019050919050565b60006020820190508181036000830152612eb881612e7c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f2882612135565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f5b57612f5a612eee565b5b600182019050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612f9c6020836122c8565b9150612fa782612f66565b602082019050919050565b60006020820190508181036000830152612fcb81612f8f565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613008601f836122c8565b915061301382612fd2565b602082019050919050565b6000602082019050818103600083015261303781612ffb565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461306b81612d69565b613075818661303e565b9450600182166000811461309057600181146130a1576130d4565b60ff198316865281860193506130d4565b6130aa85613049565b60005b838110156130cc578154818901526001820191506020810190506130ad565b838801955050505b50505092915050565b60006130e8826122bd565b6130f2818561303e565b93506131028185602086016122d9565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b600061314460058361303e565b915061314f8261310e565b600582019050919050565b6000613166828561305e565b915061317282846130dd565b915061317d82613137565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b60006131e56029836122c8565b91506131f082613189565b604082019050919050565b60006020820190508181036000830152613214816131d8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006132776026836122c8565b91506132828261321b565b604082019050919050565b600060208201905081810360008301526132a68161326a565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006133096028836122c8565b9150613314826132ad565b604082019050919050565b60006020820190508181036000830152613338816132fc565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061339b6025836122c8565b91506133a68261333f565b604082019050919050565b600060208201905081810360008301526133ca8161338e565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b600061342d602a836122c8565b9150613438826133d1565b604082019050919050565b6000602082019050818103600083015261345c81613420565b9050919050565b600061346e82612135565b915061347983612135565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134ae576134ad612eee565b5b828201905092915050565b600060408201905081810360008301526134d381856127df565b905081810360208301526134e781846127df565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b600061354c6029836122c8565b9150613557826134f0565b604082019050919050565b6000602082019050818103600083015261357b8161353f565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006135de6021836122c8565b91506135e982613582565b604082019050919050565b6000602082019050818103600083015261360d816135d1565b9050919050565b600060408201905061362960008301856121ab565b61363660208301846121ab565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061367782612135565b915061368283612135565b9250826136925761369161363d565b5b828204905092915050565b60006136a882612135565b91506136b383612135565b9250828210156136c6576136c5612eee565b5b828203905092915050565b60006136dc82612135565b91506136e783612135565b9250826136f7576136f661363d565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b600061372982613702565b613733818561370d565b93506137438185602086016122d9565b61374c8161230c565b840191505092915050565b600060a08201905061376c60008301886128c0565b61377960208301876128c0565b818103604083015261378b81866127df565b9050818103606083015261379f81856127df565b905081810360808301526137b3818461371e565b90509695505050505050565b6000815190506137ce81612201565b92915050565b6000602082840312156137ea576137e96120cd565b5b60006137f8848285016137bf565b91505092915050565b60008160e01c9050919050565b600060033d111561382d5760046000803e61382a600051613801565b90505b90565b600060443d1015613840576138c3565b6138486120c3565b60043d036004823e80513d602482011167ffffffffffffffff821117156138705750506138c3565b808201805167ffffffffffffffff81111561388e57505050506138c3565b80602083010160043d0385018111156138ab5750505050506138c3565b6138ba826020018501866123ac565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006139226034836122c8565b915061392d826138c6565b604082019050919050565b6000602082019050818103600083015261395181613915565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006139b46028836122c8565b91506139bf82613958565b604082019050919050565b600060208201905081810360008301526139e3816139a7565b9050919050565b600060a0820190506139ff60008301886128c0565b613a0c60208301876128c0565b613a1960408301866121ab565b613a2660608301856121ab565b8181036080830152613a38818461371e565b9050969550505050505056fea26469706673582212204018cc6bf9f17f0cec8b807d31a4e040d20ebb219f853443711543b8a2236e7364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addREAT(string,string)": {
        "details": "addREAT() mints the token and updates the token counter",
        "params": {
          "_hashJsonToken": "is the keccak256 of the property metadata",
          "_idCatastro": "is the ID to be provided by the Catastro office"
        },
        "returns": {
          "_0": "ID of the struct REATdata that got created/updated"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getUri(uint256)": {
        "details": "Function to get the URI by passing the tokenId",
        "params": {
          "_tokenId": "variable passed to assign the ID, that is the token type "
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateHashJsonDoc(uint256,uint128)": {
        "details": "This function will update the json hash whenever there are updates in property docs",
        "params": {
          "_id": "used to search in the reatdata mapping to find the struct that will be updated",
          "_newHashJsonDoc": "is the new hash that will replace the hashJsonDoc inside the struct reatdata"
        }
      },
      "updateMasterUri(string)": {
        "details": "updateMasterUri() sets a new URI for the token type passed as argumentwhere is the OWNER defined ?",
        "params": {
          "uri_": "is the ID that will be set for the token type"
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "reatdata": {
        "details": "a mapping to index all REATData structs created in the contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addREAT(string,string)": {
        "notice": "why are we passing the parameters as calldata ?token minted with URI property \"hashJsonDoc\" empty. It'll be added later on"
      },
      "getUri(uint256)": {
        "notice": "it takes the base URI and concatenates the _tokenId and adds \".json\" in the end"
      },
      "updateMasterUri(string)": {
        "notice": "a new token type is created for every single propertyinherited modifier \"nonReentrant\" from ReentrancyGuard contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 262,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 268,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 270,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 207,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2207,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "baseUri",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2217,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2224,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "_reatAutoId",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1880_storage"
      },
      {
        "astId": 2241,
        "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
        "label": "reatdata",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(REATData)2235_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(REATData)2235_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MasterREAT_EG_ext_Savings.REATData)",
        "numberOfBytes": "32",
        "value": "t_struct(REATData)2235_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1880_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1879,
            "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(REATData)2235_storage": {
        "encoding": "inplace",
        "label": "struct MasterREAT_EG_ext_Savings.REATData",
        "members": [
          {
            "astId": 2226,
            "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
            "label": "REATid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2228,
            "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
            "label": "idCatastro",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2230,
            "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
            "label": "hashJsonToken",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2232,
            "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
            "label": "hashJsonDoc",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2234,
            "contract": "contracts/MasterREAT_EG_ext_Savings.sol:MasterREAT_EG_ext_Savings",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x8F0cFA2de4F6491538BB3Ae38392cFC409040d72",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_idCatastro",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_hashJsonToken",
          "type": "string"
        }
      ],
      "name": "addREAT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reatdata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "REATid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "idCatastro",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hashJsonToken",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hashJsonDoc",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newHashJsonDoc",
          "type": "string"
        }
      ],
      "name": "updateHashJsonDoc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "updateMasterUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1a126b706dfdafb0dc2c7a2ba189c8e3a6e72220bc2acf8b40eb839151dcddd",
  "receipt": {
    "to": null,
    "from": "0x2B65cd345Ad3bf6dA7b497d67b3a8cFE7b9a3500",
    "contractAddress": "0x8F0cFA2de4F6491538BB3Ae38392cFC409040d72",
    "transactionIndex": 14,
    "gasUsed": "3132938",
    "logsBloom": "0x
    "blockHash": "0x2d9d38b25cd1c05c273807e3ada292f3319f9f0569a4bfee5aea5b49579885da",
    "transactionHash": "0xa1a126b706dfdafb0dc2c7a2ba189c8e3a6e72220bc2acf8b40eb839151dcddd",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 10235820,
        "transactionHash": "0xa1a126b706dfdafb0dc2c7a2ba189c8e3a6e72220bc2acf8b40eb839151dcddd",
        "address": "0x8F0cFA2de4F6491538BB3Ae38392cFC409040d72",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002b65cd345ad3bf6da7b497d67b3a8cfe7b9a3500"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x2d9d38b25cd1c05c273807e3ada292f3319f9f0569a4bfee5aea5b49579885da"
      }
    ],
    "blockNumber": 10235820,
    "cumulativeGasUsed": "5749410",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "954df8514daa8ba53995e01609430d5c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_idCatastro\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hashJsonToken\",\"type\":\"string\"}],\"name\":\"addREAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reatdata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"REATid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"idCatastro\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashJsonToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashJsonDoc\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newHashJsonDoc\",\"type\":\"string\"}],\"name\":\"updateHashJsonDoc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"updateMasterUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addREAT(string,string)\":{\"details\":\"addREAT() mints the token and updates the token counter\",\"params\":{\"_hashJsonToken\":\"is the keccak256 of the property metadata\",\"_idCatastro\":\"is the ID to be provided by the Catastro office\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateHashJsonDoc(uint256,string)\":{\"details\":\"This function will update the json hash whenever there are updates in property docs\",\"params\":{\"_id\":\"used to search in the reatdata mapping to find the struct that will be updated\",\"_newHashJsonDoc\":\"is the new hash that will replace the hashJsonDoc inside the struct reatdata\"}},\"updateMasterUri(string)\":{\"details\":\"updateMasterUri() sets a new URI for the token type passed as argumentwhere is the OWNER defined ?\",\"params\":{\"uri_\":\"is the ID that will be set for the token type\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"reatdata\":{\"details\":\"a mapping to index all REATData structs created in the contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"updateMasterUri(string)\":{\"notice\":\"a new token type is created for every single property\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterREAT_EG.sol\":\"MasterREAT_EG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MasterREAT_EG.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract MasterREAT_EG is ERC1155, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _reatAutoId;\\r\\n\\r\\n    /**\\r\\n        * @dev The Struct REATData stores all metadata for every token\\r\\n        * @param REATid is the tokenID in the standard ERC-1155\\r\\n        * @param idCatastr is the property id provided by the Catastro office\\r\\n        * @param hashJsonToken created by doing keccak256 on json of property metadata\\r\\n        * @param hashJsonDoc created by doing keccak256 on json of all docs submitted at Catastro office    \\r\\n     */\\r\\n    struct REATData {\\r\\n        uint256 REATid;\\r\\n        string idCatastro;\\r\\n        string hashJsonToken;\\r\\n        string hashJsonDoc;\\r\\n        bool exists;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev a mapping to index all REATData structs created in the contract\\r\\n     */\\r\\n    mapping(uint256 => REATData) public reatdata;\\r\\n\\r\\n    constructor()\\r\\n        ERC1155(\\\"https://www.realestatechain.es/api/item/{id}.json\\\")\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n        * @dev updateMasterUri() sets a new URI for the token type passed as argument\\r\\n        * @dev where is the OWNER defined ?\\r\\n        * @param uri_ is the ID that will be set for the token type\\r\\n        * @notice a new token type is created for every single property\\r\\n     */\\r\\n    function updateMasterUri(string memory uri_) public onlyOwner {\\r\\n        _setURI(uri_);\\r\\n    }\\r\\n\\r\\n    \\r\\n    // /**\\r\\n    //     * @dev Function to add the tokenId on the URI that's returned\\r\\n    //     * @param _tokenId variable passed to assign the ID, that is the token type \\r\\n    //     * @notice it takes the base URI and concatenates the _tokenId and adds \\\".json\\\" in the end\\r\\n    //  */\\r\\n    // function uri(uint256 _tokenId) override public view returns(string memory) {\\r\\n    //     return string(\\r\\n    //         abi.encode(\\r\\n    //             baseUri,\\r\\n    //             Strings.toString(_tokenId),\\r\\n    //             \\\".json\\\"\\r\\n    //         )\\r\\n    //     )\\r\\n    // }\\r\\n    \\r\\n    /**\\r\\n        * @dev addREAT() mints the token and updates the token counter\\r\\n        * @param _idCatastro is the ID to be provided by the Catastro office\\r\\n        * @param _hashJsonToken is the keccak256 of the property metadata\\r\\n     */\\r\\n\\r\\n    function addREAT(\\r\\n        string calldata _idCatastro,\\r\\n        string calldata _hashJsonToken\\r\\n    ) public onlyOwner returns (uint256) {\\r\\n        _reatAutoId.increment();\\r\\n        uint256 newREATId = _reatAutoId.current();\\r\\n        _mint(msg.sender, newREATId, 1, \\\"\\\");\\r\\n\\r\\n        reatdata[newREATId] = REATData(\\r\\n            newREATId,\\r\\n            _idCatastro,\\r\\n            _hashJsonToken,\\r\\n            \\\"\\\",\\r\\n            true\\r\\n        );\\r\\n        return newREATId;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev This function will update the json hash whenever there are updates in property docs\\r\\n        * @param _id used to search in the reatdata mapping to find the struct that will be updated\\r\\n        * @param _newHashJsonDoc is the new hash that will replace the hashJsonDoc inside the struct reatdata\\r\\n     */\\r\\n    function updateHashJsonDoc(uint256 _id, string calldata _newHashJsonDoc)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(reatdata[_id].exists == true);\\r\\n        reatdata[_id].hashJsonDoc = _newHashJsonDoc;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x22daebfda01099a3e0c562241b584fa1cb048d2569a9731737564e99e6f8fafd\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180606001604052806031815260200162003897603191396200003d816200006460201b60201c565b506200005e620000526200008060201b60201c565b6200008860201b60201c565b62000263565b80600290805190602001906200007c9291906200014e565b5050565b600033905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200015c906200022d565b90600052602060002090601f016020900481019282620001805760008555620001cc565b82601f106200019b57805160ff1916838001178555620001cc565b82800160010185558215620001cc579182015b82811115620001cb578251825591602001919060010190620001ae565b5b509050620001db9190620001df565b5090565b5b80821115620001fa576000816000905550600101620001e0565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200024657607f821691505b602082108114156200025d576200025c620001fe565b5b50919050565b61362480620002736000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c8063715018a611610097578063acbe9dd611610066578063acbe9dd614610285578063e985e9c5146102b5578063f242432a146102e5578063f2fde38b14610301576100f4565b8063715018a6146102255780638da5cb5b1461022f5780639dcbf8761461024d578063a22cb46514610269576100f4565b806327786ae1116100d357806327786ae1146101895780632eb2c2d6146101a55780634e1273f4146101c15780635d9a8a45146101f1576100f4565b8062fdd58e146100f957806301ffc9a7146101295780630e89341c14610159575b600080fd5b610113600480360381019061010e9190611fb2565b61031d565b6040516101209190612001565b60405180910390f35b610143600480360381019061013e9190612074565b6103e6565b60405161015091906120bc565b60405180910390f35b610173600480360381019061016e91906120d7565b6104c8565b604051610180919061219d565b60405180910390f35b6101a3600480360381019061019e9190612224565b61055c565b005b6101bf60048036038101906101ba9190612477565b610637565b005b6101db60048036038101906101d69190612609565b6106d8565b6040516101e8919061273f565b60405180910390f35b61020b600480360381019061020691906120d7565b6107f1565b60405161021c959493929190612761565b60405180910390f35b61022d6109cc565b005b610237610a54565b60405161024491906127d8565b60405180910390f35b61026760048036038101906102629190612894565b610a7e565b005b610283600480360381019061027e9190612909565b610b06565b005b61029f600480360381019061029a9190612949565b610b1c565b6040516102ac9190612001565b60405180910390f35b6102cf60048036038101906102ca91906129ca565b610d32565b6040516102dc91906120bc565b60405180910390f35b6102ff60048036038101906102fa9190612a0a565b610dc6565b005b61031b60048036038101906103169190612aa1565b610e67565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038590612b40565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b157507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104c157506104c082610f5f565b5b9050919050565b6060600280546104d790612b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461050390612b8f565b80156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b50505050509050919050565b610564610fc9565b73ffffffffffffffffffffffffffffffffffffffff16610582610a54565b73ffffffffffffffffffffffffffffffffffffffff16146105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90612c0d565b60405180910390fd5b600115156005600085815260200190815260200160002060040160009054906101000a900460ff1615151461060c57600080fd5b8181600560008681526020019081526020016000206003019190610631929190611de1565b50505050565b61063f610fc9565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061068557506106848561067f610fc9565b610d32565b5b6106c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bb90612c9f565b60405180910390fd5b6106d18585858585610fd1565b5050505050565b6060815183511461071e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071590612d31565b60405180910390fd5b6000835167ffffffffffffffff81111561073b5761073a612284565b5b6040519080825280602002602001820160405280156107695781602001602082028036833780820191505090505b50905060005b84518110156107e6576107b685828151811061078e5761078d612d51565b5b60200260200101518583815181106107a9576107a8612d51565b5b602002602001015161031d565b8282815181106107c9576107c8612d51565b5b602002602001018181525050806107df90612daf565b905061076f565b508091505092915050565b600560205280600052604060002060009150905080600001549080600101805461081a90612b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461084690612b8f565b80156108935780601f1061086857610100808354040283529160200191610893565b820191906000526020600020905b81548152906001019060200180831161087657829003601f168201915b5050505050908060020180546108a890612b8f565b80601f01602080910402602001604051908101604052809291908181526020018280546108d490612b8f565b80156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b50505050509080600301805461093690612b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461096290612b8f565b80156109af5780601f10610984576101008083540402835291602001916109af565b820191906000526020600020905b81548152906001019060200180831161099257829003601f168201915b5050505050908060040160009054906101000a900460ff16905085565b6109d4610fc9565b73ffffffffffffffffffffffffffffffffffffffff166109f2610a54565b73ffffffffffffffffffffffffffffffffffffffff1614610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90612c0d565b60405180910390fd5b610a5260006112e5565b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a86610fc9565b73ffffffffffffffffffffffffffffffffffffffff16610aa4610a54565b73ffffffffffffffffffffffffffffffffffffffff1614610afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190612c0d565b60405180910390fd5b610b03816113ab565b50565b610b18610b11610fc9565b83836113c5565b5050565b6000610b26610fc9565b73ffffffffffffffffffffffffffffffffffffffff16610b44610a54565b73ffffffffffffffffffffffffffffffffffffffff1614610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9190612c0d565b60405180910390fd5b610ba46004611532565b6000610bb06004611548565b9050610bce3382600160405180602001604052806000815250611556565b6040518060a0016040528082815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016040518060200160405280600081525081526020016001151581525060056000838152602001908152602001600020600082015181600001556020820151816001019080519060200190610cc8929190611e67565b506040820151816002019080519060200190610ce5929190611e67565b506060820151816003019080519060200190610d02929190611e67565b5060808201518160040160006101000a81548160ff02191690831515021790555090505080915050949350505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610dce610fc9565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610e145750610e1385610e0e610fc9565b610d32565b5b610e53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4a90612e6a565b60405180910390fd5b610e6085858585856116ec565b5050505050565b610e6f610fc9565b73ffffffffffffffffffffffffffffffffffffffff16610e8d610a54565b73ffffffffffffffffffffffffffffffffffffffff1614610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda90612c0d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90612efc565b60405180910390fd5b610f5c816112e5565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114611015576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100c90612f8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611085576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107c90613020565b60405180910390fd5b600061108f610fc9565b905061109f81878787878761196e565b60005b84518110156112505760008582815181106110c0576110bf612d51565b5b6020026020010151905060008583815181106110df576110de612d51565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611180576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611177906130b2565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461123591906130d2565b925050819055505050508061124990612daf565b90506110a2565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516112c7929190613128565b60405180910390a46112dd818787878787611976565b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600290805190602001906113c1929190611e67565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142b906131d1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161152591906120bc565b60405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd90613263565b60405180910390fd5b60006115d0610fc9565b90506115f1816000876115e288611b5d565b6115eb88611b5d565b8761196e565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461165091906130d2565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516116ce929190613283565b60405180910390a46116e581600087878787611bd7565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561175c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175390613020565b60405180910390fd5b6000611766610fc9565b905061178681878761177788611b5d565b61178088611b5d565b8761196e565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561181d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611814906130b2565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118d291906130d2565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161194f929190613283565b60405180910390a4611965828888888888611bd7565b50505050505050565b505050505050565b6119958473ffffffffffffffffffffffffffffffffffffffff16611dbe565b15611b55578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016119db959493929190613301565b602060405180830381600087803b1580156119f557600080fd5b505af1925050508015611a2657506040513d601f19601f82011682018060405250810190611a23919061337e565b60015b611acc57611a326133b8565b806308c379a01415611a8f5750611a476133da565b80611a525750611a91565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a86919061219d565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac3906134e2565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4a90613574565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611b7c57611b7b612284565b5b604051908082528060200260200182016040528015611baa5781602001602082028036833780820191505090505b5090508281600081518110611bc257611bc1612d51565b5b60200260200101818152505080915050919050565b611bf68473ffffffffffffffffffffffffffffffffffffffff16611dbe565b15611db6578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611c3c959493929190613594565b602060405180830381600087803b158015611c5657600080fd5b505af1925050508015611c8757506040513d601f19601f82011682018060405250810190611c84919061337e565b60015b611d2d57611c936133b8565b806308c379a01415611cf05750611ca86133da565b80611cb35750611cf2565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce7919061219d565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d24906134e2565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab90613574565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611ded90612b8f565b90600052602060002090601f016020900481019282611e0f5760008555611e56565b82601f10611e2857803560ff1916838001178555611e56565b82800160010185558215611e56579182015b82811115611e55578235825591602001919060010190611e3a565b5b509050611e639190611eed565b5090565b828054611e7390612b8f565b90600052602060002090601f016020900481019282611e955760008555611edc565b82601f10611eae57805160ff1916838001178555611edc565b82800160010185558215611edc579182015b82811115611edb578251825591602001919060010190611ec0565b5b509050611ee99190611eed565b5090565b5b80821115611f06576000816000905550600101611eee565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4982611f1e565b9050919050565b611f5981611f3e565b8114611f6457600080fd5b50565b600081359050611f7681611f50565b92915050565b6000819050919050565b611f8f81611f7c565b8114611f9a57600080fd5b50565b600081359050611fac81611f86565b92915050565b60008060408385031215611fc957611fc8611f14565b5b6000611fd785828601611f67565b9250506020611fe885828601611f9d565b9150509250929050565b611ffb81611f7c565b82525050565b60006020820190506120166000830184611ff2565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120518161201c565b811461205c57600080fd5b50565b60008135905061206e81612048565b92915050565b60006020828403121561208a57612089611f14565b5b60006120988482850161205f565b91505092915050565b60008115159050919050565b6120b6816120a1565b82525050565b60006020820190506120d160008301846120ad565b92915050565b6000602082840312156120ed576120ec611f14565b5b60006120fb84828501611f9d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561213e578082015181840152602081019050612123565b8381111561214d576000848401525b50505050565b6000601f19601f8301169050919050565b600061216f82612104565b612179818561210f565b9350612189818560208601612120565b61219281612153565b840191505092915050565b600060208201905081810360008301526121b78184612164565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126121e4576121e36121bf565b5b8235905067ffffffffffffffff811115612201576122006121c4565b5b60208301915083600182028301111561221d5761221c6121c9565b5b9250929050565b60008060006040848603121561223d5761223c611f14565b5b600061224b86828701611f9d565b935050602084013567ffffffffffffffff81111561226c5761226b611f19565b5b612278868287016121ce565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122bc82612153565b810181811067ffffffffffffffff821117156122db576122da612284565b5b80604052505050565b60006122ee611f0a565b90506122fa82826122b3565b919050565b600067ffffffffffffffff82111561231a57612319612284565b5b602082029050602081019050919050565b600061233e612339846122ff565b6122e4565b90508083825260208201905060208402830185811115612361576123606121c9565b5b835b8181101561238a57806123768882611f9d565b845260208401935050602081019050612363565b5050509392505050565b600082601f8301126123a9576123a86121bf565b5b81356123b984826020860161232b565b91505092915050565b600080fd5b600067ffffffffffffffff8211156123e2576123e1612284565b5b6123eb82612153565b9050602081019050919050565b82818337600083830152505050565b600061241a612415846123c7565b6122e4565b905082815260208101848484011115612436576124356123c2565b5b6124418482856123f8565b509392505050565b600082601f83011261245e5761245d6121bf565b5b813561246e848260208601612407565b91505092915050565b600080600080600060a0868803121561249357612492611f14565b5b60006124a188828901611f67565b95505060206124b288828901611f67565b945050604086013567ffffffffffffffff8111156124d3576124d2611f19565b5b6124df88828901612394565b935050606086013567ffffffffffffffff811115612500576124ff611f19565b5b61250c88828901612394565b925050608086013567ffffffffffffffff81111561252d5761252c611f19565b5b61253988828901612449565b9150509295509295909350565b600067ffffffffffffffff82111561256157612560612284565b5b602082029050602081019050919050565b600061258561258084612546565b6122e4565b905080838252602082019050602084028301858111156125a8576125a76121c9565b5b835b818110156125d157806125bd8882611f67565b8452602084019350506020810190506125aa565b5050509392505050565b600082601f8301126125f0576125ef6121bf565b5b8135612600848260208601612572565b91505092915050565b600080604083850312156126205761261f611f14565b5b600083013567ffffffffffffffff81111561263e5761263d611f19565b5b61264a858286016125db565b925050602083013567ffffffffffffffff81111561266b5761266a611f19565b5b61267785828601612394565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6126b681611f7c565b82525050565b60006126c883836126ad565b60208301905092915050565b6000602082019050919050565b60006126ec82612681565b6126f6818561268c565b93506127018361269d565b8060005b8381101561273257815161271988826126bc565b9750612724836126d4565b925050600181019050612705565b5085935050505092915050565b6000602082019050818103600083015261275981846126e1565b905092915050565b600060a0820190506127766000830188611ff2565b81810360208301526127888187612164565b9050818103604083015261279c8186612164565b905081810360608301526127b08185612164565b90506127bf60808301846120ad565b9695505050505050565b6127d281611f3e565b82525050565b60006020820190506127ed60008301846127c9565b92915050565b600067ffffffffffffffff82111561280e5761280d612284565b5b61281782612153565b9050602081019050919050565b6000612837612832846127f3565b6122e4565b905082815260208101848484011115612853576128526123c2565b5b61285e8482856123f8565b509392505050565b600082601f83011261287b5761287a6121bf565b5b813561288b848260208601612824565b91505092915050565b6000602082840312156128aa576128a9611f14565b5b600082013567ffffffffffffffff8111156128c8576128c7611f19565b5b6128d484828501612866565b91505092915050565b6128e6816120a1565b81146128f157600080fd5b50565b600081359050612903816128dd565b92915050565b600080604083850312156129205761291f611f14565b5b600061292e85828601611f67565b925050602061293f858286016128f4565b9150509250929050565b6000806000806040858703121561296357612962611f14565b5b600085013567ffffffffffffffff81111561298157612980611f19565b5b61298d878288016121ce565b9450945050602085013567ffffffffffffffff8111156129b0576129af611f19565b5b6129bc878288016121ce565b925092505092959194509250565b600080604083850312156129e1576129e0611f14565b5b60006129ef85828601611f67565b9250506020612a0085828601611f67565b9150509250929050565b600080600080600060a08688031215612a2657612a25611f14565b5b6000612a3488828901611f67565b9550506020612a4588828901611f67565b9450506040612a5688828901611f9d565b9350506060612a6788828901611f9d565b925050608086013567ffffffffffffffff811115612a8857612a87611f19565b5b612a9488828901612449565b9150509295509295909350565b600060208284031215612ab757612ab6611f14565b5b6000612ac584828501611f67565b91505092915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000612b2a602b8361210f565b9150612b3582612ace565b604082019050919050565b60006020820190508181036000830152612b5981612b1d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ba757607f821691505b60208210811415612bbb57612bba612b60565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bf760208361210f565b9150612c0282612bc1565b602082019050919050565b60006020820190508181036000830152612c2681612bea565b9050919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000612c8960328361210f565b9150612c9482612c2d565b604082019050919050565b60006020820190508181036000830152612cb881612c7c565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612d1b60298361210f565b9150612d2682612cbf565b604082019050919050565b60006020820190508181036000830152612d4a81612d0e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612dba82611f7c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ded57612dec612d80565b5b600182019050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000612e5460298361210f565b9150612e5f82612df8565b604082019050919050565b60006020820190508181036000830152612e8381612e47565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ee660268361210f565b9150612ef182612e8a565b604082019050919050565b60006020820190508181036000830152612f1581612ed9565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612f7860288361210f565b9150612f8382612f1c565b604082019050919050565b60006020820190508181036000830152612fa781612f6b565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061300a60258361210f565b915061301582612fae565b604082019050919050565b6000602082019050818103600083015261303981612ffd565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b600061309c602a8361210f565b91506130a782613040565b604082019050919050565b600060208201905081810360008301526130cb8161308f565b9050919050565b60006130dd82611f7c565b91506130e883611f7c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561311d5761311c612d80565b5b828201905092915050565b6000604082019050818103600083015261314281856126e1565b9050818103602083015261315681846126e1565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006131bb60298361210f565b91506131c68261315f565b604082019050919050565b600060208201905081810360008301526131ea816131ae565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061324d60218361210f565b9150613258826131f1565b604082019050919050565b6000602082019050818103600083015261327c81613240565b9050919050565b60006040820190506132986000830185611ff2565b6132a56020830184611ff2565b9392505050565b600081519050919050565b600082825260208201905092915050565b60006132d3826132ac565b6132dd81856132b7565b93506132ed818560208601612120565b6132f681612153565b840191505092915050565b600060a08201905061331660008301886127c9565b61332360208301876127c9565b818103604083015261333581866126e1565b9050818103606083015261334981856126e1565b9050818103608083015261335d81846132c8565b90509695505050505050565b60008151905061337881612048565b92915050565b60006020828403121561339457613393611f14565b5b60006133a284828501613369565b91505092915050565b60008160e01c9050919050565b600060033d11156133d75760046000803e6133d46000516133ab565b90505b90565b600060443d10156133ea5761346d565b6133f2611f0a565b60043d036004823e80513d602482011167ffffffffffffffff8211171561341a57505061346d565b808201805167ffffffffffffffff811115613438575050505061346d565b80602083010160043d03850181111561345557505050505061346d565b613464826020018501866122b3565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006134cc60348361210f565b91506134d782613470565b604082019050919050565b600060208201905081810360008301526134fb816134bf565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061355e60288361210f565b915061356982613502565b604082019050919050565b6000602082019050818103600083015261358d81613551565b9050919050565b600060a0820190506135a960008301886127c9565b6135b660208301876127c9565b6135c36040830186611ff2565b6135d06060830185611ff2565b81810360808301526135e281846132c8565b9050969550505050505056fea2646970667358221220f1fb923709c8e7eedda7ae785d2d48f29dd3a740692ed9038101308ec2412cc864736f6c6343000809003368747470733a2f2f7777772e7265616c657374617465636861696e2e65732f6170692f6974656d2f7b69647d2e6a736f6e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c8063715018a611610097578063acbe9dd611610066578063acbe9dd614610285578063e985e9c5146102b5578063f242432a146102e5578063f2fde38b14610301576100f4565b8063715018a6146102255780638da5cb5b1461022f5780639dcbf8761461024d578063a22cb46514610269576100f4565b806327786ae1116100d357806327786ae1146101895780632eb2c2d6146101a55780634e1273f4146101c15780635d9a8a45146101f1576100f4565b8062fdd58e146100f957806301ffc9a7146101295780630e89341c14610159575b600080fd5b610113600480360381019061010e9190611fb2565b61031d565b6040516101209190612001565b60405180910390f35b610143600480360381019061013e9190612074565b6103e6565b60405161015091906120bc565b60405180910390f35b610173600480360381019061016e91906120d7565b6104c8565b604051610180919061219d565b60405180910390f35b6101a3600480360381019061019e9190612224565b61055c565b005b6101bf60048036038101906101ba9190612477565b610637565b005b6101db60048036038101906101d69190612609565b6106d8565b6040516101e8919061273f565b60405180910390f35b61020b600480360381019061020691906120d7565b6107f1565b60405161021c959493929190612761565b60405180910390f35b61022d6109cc565b005b610237610a54565b60405161024491906127d8565b60405180910390f35b61026760048036038101906102629190612894565b610a7e565b005b610283600480360381019061027e9190612909565b610b06565b005b61029f600480360381019061029a9190612949565b610b1c565b6040516102ac9190612001565b60405180910390f35b6102cf60048036038101906102ca91906129ca565b610d32565b6040516102dc91906120bc565b60405180910390f35b6102ff60048036038101906102fa9190612a0a565b610dc6565b005b61031b60048036038101906103169190612aa1565b610e67565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561038e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038590612b40565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b157507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104c157506104c082610f5f565b5b9050919050565b6060600280546104d790612b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461050390612b8f565b80156105505780601f1061052557610100808354040283529160200191610550565b820191906000526020600020905b81548152906001019060200180831161053357829003601f168201915b50505050509050919050565b610564610fc9565b73ffffffffffffffffffffffffffffffffffffffff16610582610a54565b73ffffffffffffffffffffffffffffffffffffffff16146105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90612c0d565b60405180910390fd5b600115156005600085815260200190815260200160002060040160009054906101000a900460ff1615151461060c57600080fd5b8181600560008681526020019081526020016000206003019190610631929190611de1565b50505050565b61063f610fc9565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061068557506106848561067f610fc9565b610d32565b5b6106c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bb90612c9f565b60405180910390fd5b6106d18585858585610fd1565b5050505050565b6060815183511461071e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071590612d31565b60405180910390fd5b6000835167ffffffffffffffff81111561073b5761073a612284565b5b6040519080825280602002602001820160405280156107695781602001602082028036833780820191505090505b50905060005b84518110156107e6576107b685828151811061078e5761078d612d51565b5b60200260200101518583815181106107a9576107a8612d51565b5b602002602001015161031d565b8282815181106107c9576107c8612d51565b5b602002602001018181525050806107df90612daf565b905061076f565b508091505092915050565b600560205280600052604060002060009150905080600001549080600101805461081a90612b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461084690612b8f565b80156108935780601f1061086857610100808354040283529160200191610893565b820191906000526020600020905b81548152906001019060200180831161087657829003601f168201915b5050505050908060020180546108a890612b8f565b80601f01602080910402602001604051908101604052809291908181526020018280546108d490612b8f565b80156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b50505050509080600301805461093690612b8f565b80601f016020809104026020016040519081016040528092919081815260200182805461096290612b8f565b80156109af5780601f10610984576101008083540402835291602001916109af565b820191906000526020600020905b81548152906001019060200180831161099257829003601f168201915b5050505050908060040160009054906101000a900460ff16905085565b6109d4610fc9565b73ffffffffffffffffffffffffffffffffffffffff166109f2610a54565b73ffffffffffffffffffffffffffffffffffffffff1614610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90612c0d565b60405180910390fd5b610a5260006112e5565b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a86610fc9565b73ffffffffffffffffffffffffffffffffffffffff16610aa4610a54565b73ffffffffffffffffffffffffffffffffffffffff1614610afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af190612c0d565b60405180910390fd5b610b03816113ab565b50565b610b18610b11610fc9565b83836113c5565b5050565b6000610b26610fc9565b73ffffffffffffffffffffffffffffffffffffffff16610b44610a54565b73ffffffffffffffffffffffffffffffffffffffff1614610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9190612c0d565b60405180910390fd5b610ba46004611532565b6000610bb06004611548565b9050610bce3382600160405180602001604052806000815250611556565b6040518060a0016040528082815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016040518060200160405280600081525081526020016001151581525060056000838152602001908152602001600020600082015181600001556020820151816001019080519060200190610cc8929190611e67565b506040820151816002019080519060200190610ce5929190611e67565b506060820151816003019080519060200190610d02929190611e67565b5060808201518160040160006101000a81548160ff02191690831515021790555090505080915050949350505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610dce610fc9565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610e145750610e1385610e0e610fc9565b610d32565b5b610e53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4a90612e6a565b60405180910390fd5b610e6085858585856116ec565b5050505050565b610e6f610fc9565b73ffffffffffffffffffffffffffffffffffffffff16610e8d610a54565b73ffffffffffffffffffffffffffffffffffffffff1614610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda90612c0d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90612efc565b60405180910390fd5b610f5c816112e5565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114611015576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100c90612f8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611085576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107c90613020565b60405180910390fd5b600061108f610fc9565b905061109f81878787878761196e565b60005b84518110156112505760008582815181106110c0576110bf612d51565b5b6020026020010151905060008583815181106110df576110de612d51565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611180576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611177906130b2565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461123591906130d2565b925050819055505050508061124990612daf565b90506110a2565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516112c7929190613128565b60405180910390a46112dd818787878787611976565b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600290805190602001906113c1929190611e67565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142b906131d1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161152591906120bc565b60405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd90613263565b60405180910390fd5b60006115d0610fc9565b90506115f1816000876115e288611b5d565b6115eb88611b5d565b8761196e565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461165091906130d2565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516116ce929190613283565b60405180910390a46116e581600087878787611bd7565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561175c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175390613020565b60405180910390fd5b6000611766610fc9565b905061178681878761177788611b5d565b61178088611b5d565b8761196e565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561181d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611814906130b2565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118d291906130d2565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161194f929190613283565b60405180910390a4611965828888888888611bd7565b50505050505050565b505050505050565b6119958473ffffffffffffffffffffffffffffffffffffffff16611dbe565b15611b55578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016119db959493929190613301565b602060405180830381600087803b1580156119f557600080fd5b505af1925050508015611a2657506040513d601f19601f82011682018060405250810190611a23919061337e565b60015b611acc57611a326133b8565b806308c379a01415611a8f5750611a476133da565b80611a525750611a91565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a86919061219d565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac3906134e2565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4a90613574565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611b7c57611b7b612284565b5b604051908082528060200260200182016040528015611baa5781602001602082028036833780820191505090505b5090508281600081518110611bc257611bc1612d51565b5b60200260200101818152505080915050919050565b611bf68473ffffffffffffffffffffffffffffffffffffffff16611dbe565b15611db6578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611c3c959493929190613594565b602060405180830381600087803b158015611c5657600080fd5b505af1925050508015611c8757506040513d601f19601f82011682018060405250810190611c84919061337e565b60015b611d2d57611c936133b8565b806308c379a01415611cf05750611ca86133da565b80611cb35750611cf2565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce7919061219d565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d24906134e2565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab90613574565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611ded90612b8f565b90600052602060002090601f016020900481019282611e0f5760008555611e56565b82601f10611e2857803560ff1916838001178555611e56565b82800160010185558215611e56579182015b82811115611e55578235825591602001919060010190611e3a565b5b509050611e639190611eed565b5090565b828054611e7390612b8f565b90600052602060002090601f016020900481019282611e955760008555611edc565b82601f10611eae57805160ff1916838001178555611edc565b82800160010185558215611edc579182015b82811115611edb578251825591602001919060010190611ec0565b5b509050611ee99190611eed565b5090565b5b80821115611f06576000816000905550600101611eee565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f4982611f1e565b9050919050565b611f5981611f3e565b8114611f6457600080fd5b50565b600081359050611f7681611f50565b92915050565b6000819050919050565b611f8f81611f7c565b8114611f9a57600080fd5b50565b600081359050611fac81611f86565b92915050565b60008060408385031215611fc957611fc8611f14565b5b6000611fd785828601611f67565b9250506020611fe885828601611f9d565b9150509250929050565b611ffb81611f7c565b82525050565b60006020820190506120166000830184611ff2565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120518161201c565b811461205c57600080fd5b50565b60008135905061206e81612048565b92915050565b60006020828403121561208a57612089611f14565b5b60006120988482850161205f565b91505092915050565b60008115159050919050565b6120b6816120a1565b82525050565b60006020820190506120d160008301846120ad565b92915050565b6000602082840312156120ed576120ec611f14565b5b60006120fb84828501611f9d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561213e578082015181840152602081019050612123565b8381111561214d576000848401525b50505050565b6000601f19601f8301169050919050565b600061216f82612104565b612179818561210f565b9350612189818560208601612120565b61219281612153565b840191505092915050565b600060208201905081810360008301526121b78184612164565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126121e4576121e36121bf565b5b8235905067ffffffffffffffff811115612201576122006121c4565b5b60208301915083600182028301111561221d5761221c6121c9565b5b9250929050565b60008060006040848603121561223d5761223c611f14565b5b600061224b86828701611f9d565b935050602084013567ffffffffffffffff81111561226c5761226b611f19565b5b612278868287016121ce565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122bc82612153565b810181811067ffffffffffffffff821117156122db576122da612284565b5b80604052505050565b60006122ee611f0a565b90506122fa82826122b3565b919050565b600067ffffffffffffffff82111561231a57612319612284565b5b602082029050602081019050919050565b600061233e612339846122ff565b6122e4565b90508083825260208201905060208402830185811115612361576123606121c9565b5b835b8181101561238a57806123768882611f9d565b845260208401935050602081019050612363565b5050509392505050565b600082601f8301126123a9576123a86121bf565b5b81356123b984826020860161232b565b91505092915050565b600080fd5b600067ffffffffffffffff8211156123e2576123e1612284565b5b6123eb82612153565b9050602081019050919050565b82818337600083830152505050565b600061241a612415846123c7565b6122e4565b905082815260208101848484011115612436576124356123c2565b5b6124418482856123f8565b509392505050565b600082601f83011261245e5761245d6121bf565b5b813561246e848260208601612407565b91505092915050565b600080600080600060a0868803121561249357612492611f14565b5b60006124a188828901611f67565b95505060206124b288828901611f67565b945050604086013567ffffffffffffffff8111156124d3576124d2611f19565b5b6124df88828901612394565b935050606086013567ffffffffffffffff811115612500576124ff611f19565b5b61250c88828901612394565b925050608086013567ffffffffffffffff81111561252d5761252c611f19565b5b61253988828901612449565b9150509295509295909350565b600067ffffffffffffffff82111561256157612560612284565b5b602082029050602081019050919050565b600061258561258084612546565b6122e4565b905080838252602082019050602084028301858111156125a8576125a76121c9565b5b835b818110156125d157806125bd8882611f67565b8452602084019350506020810190506125aa565b5050509392505050565b600082601f8301126125f0576125ef6121bf565b5b8135612600848260208601612572565b91505092915050565b600080604083850312156126205761261f611f14565b5b600083013567ffffffffffffffff81111561263e5761263d611f19565b5b61264a858286016125db565b925050602083013567ffffffffffffffff81111561266b5761266a611f19565b5b61267785828601612394565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6126b681611f7c565b82525050565b60006126c883836126ad565b60208301905092915050565b6000602082019050919050565b60006126ec82612681565b6126f6818561268c565b93506127018361269d565b8060005b8381101561273257815161271988826126bc565b9750612724836126d4565b925050600181019050612705565b5085935050505092915050565b6000602082019050818103600083015261275981846126e1565b905092915050565b600060a0820190506127766000830188611ff2565b81810360208301526127888187612164565b9050818103604083015261279c8186612164565b905081810360608301526127b08185612164565b90506127bf60808301846120ad565b9695505050505050565b6127d281611f3e565b82525050565b60006020820190506127ed60008301846127c9565b92915050565b600067ffffffffffffffff82111561280e5761280d612284565b5b61281782612153565b9050602081019050919050565b6000612837612832846127f3565b6122e4565b905082815260208101848484011115612853576128526123c2565b5b61285e8482856123f8565b509392505050565b600082601f83011261287b5761287a6121bf565b5b813561288b848260208601612824565b91505092915050565b6000602082840312156128aa576128a9611f14565b5b600082013567ffffffffffffffff8111156128c8576128c7611f19565b5b6128d484828501612866565b91505092915050565b6128e6816120a1565b81146128f157600080fd5b50565b600081359050612903816128dd565b92915050565b600080604083850312156129205761291f611f14565b5b600061292e85828601611f67565b925050602061293f858286016128f4565b9150509250929050565b6000806000806040858703121561296357612962611f14565b5b600085013567ffffffffffffffff81111561298157612980611f19565b5b61298d878288016121ce565b9450945050602085013567ffffffffffffffff8111156129b0576129af611f19565b5b6129bc878288016121ce565b925092505092959194509250565b600080604083850312156129e1576129e0611f14565b5b60006129ef85828601611f67565b9250506020612a0085828601611f67565b9150509250929050565b600080600080600060a08688031215612a2657612a25611f14565b5b6000612a3488828901611f67565b9550506020612a4588828901611f67565b9450506040612a5688828901611f9d565b9350506060612a6788828901611f9d565b925050608086013567ffffffffffffffff811115612a8857612a87611f19565b5b612a9488828901612449565b9150509295509295909350565b600060208284031215612ab757612ab6611f14565b5b6000612ac584828501611f67565b91505092915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000612b2a602b8361210f565b9150612b3582612ace565b604082019050919050565b60006020820190508181036000830152612b5981612b1d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ba757607f821691505b60208210811415612bbb57612bba612b60565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612bf760208361210f565b9150612c0282612bc1565b602082019050919050565b60006020820190508181036000830152612c2681612bea565b9050919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000612c8960328361210f565b9150612c9482612c2d565b604082019050919050565b60006020820190508181036000830152612cb881612c7c565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612d1b60298361210f565b9150612d2682612cbf565b604082019050919050565b60006020820190508181036000830152612d4a81612d0e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612dba82611f7c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ded57612dec612d80565b5b600182019050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000612e5460298361210f565b9150612e5f82612df8565b604082019050919050565b60006020820190508181036000830152612e8381612e47565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ee660268361210f565b9150612ef182612e8a565b604082019050919050565b60006020820190508181036000830152612f1581612ed9565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612f7860288361210f565b9150612f8382612f1c565b604082019050919050565b60006020820190508181036000830152612fa781612f6b565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061300a60258361210f565b915061301582612fae565b604082019050919050565b6000602082019050818103600083015261303981612ffd565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b600061309c602a8361210f565b91506130a782613040565b604082019050919050565b600060208201905081810360008301526130cb8161308f565b9050919050565b60006130dd82611f7c565b91506130e883611f7c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561311d5761311c612d80565b5b828201905092915050565b6000604082019050818103600083015261314281856126e1565b9050818103602083015261315681846126e1565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006131bb60298361210f565b91506131c68261315f565b604082019050919050565b600060208201905081810360008301526131ea816131ae565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061324d60218361210f565b9150613258826131f1565b604082019050919050565b6000602082019050818103600083015261327c81613240565b9050919050565b60006040820190506132986000830185611ff2565b6132a56020830184611ff2565b9392505050565b600081519050919050565b600082825260208201905092915050565b60006132d3826132ac565b6132dd81856132b7565b93506132ed818560208601612120565b6132f681612153565b840191505092915050565b600060a08201905061331660008301886127c9565b61332360208301876127c9565b818103604083015261333581866126e1565b9050818103606083015261334981856126e1565b9050818103608083015261335d81846132c8565b90509695505050505050565b60008151905061337881612048565b92915050565b60006020828403121561339457613393611f14565b5b60006133a284828501613369565b91505092915050565b60008160e01c9050919050565b600060033d11156133d75760046000803e6133d46000516133ab565b90505b90565b600060443d10156133ea5761346d565b6133f2611f0a565b60043d036004823e80513d602482011167ffffffffffffffff8211171561341a57505061346d565b808201805167ffffffffffffffff811115613438575050505061346d565b80602083010160043d03850181111561345557505050505061346d565b613464826020018501866122b3565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006134cc60348361210f565b91506134d782613470565b604082019050919050565b600060208201905081810360008301526134fb816134bf565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061355e60288361210f565b915061356982613502565b604082019050919050565b6000602082019050818103600083015261358d81613551565b9050919050565b600060a0820190506135a960008301886127c9565b6135b660208301876127c9565b6135c36040830186611ff2565b6135d06060830185611ff2565b81810360808301526135e281846132c8565b9050969550505050505056fea2646970667358221220f1fb923709c8e7eedda7ae785d2d48f29dd3a740692ed9038101308ec2412cc864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addREAT(string,string)": {
        "details": "addREAT() mints the token and updates the token counter",
        "params": {
          "_hashJsonToken": "is the keccak256 of the property metadata",
          "_idCatastro": "is the ID to be provided by the Catastro office"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateHashJsonDoc(uint256,string)": {
        "details": "This function will update the json hash whenever there are updates in property docs",
        "params": {
          "_id": "used to search in the reatdata mapping to find the struct that will be updated",
          "_newHashJsonDoc": "is the new hash that will replace the hashJsonDoc inside the struct reatdata"
        }
      },
      "updateMasterUri(string)": {
        "details": "updateMasterUri() sets a new URI for the token type passed as argumentwhere is the OWNER defined ?",
        "params": {
          "uri_": "is the ID that will be set for the token type"
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "reatdata": {
        "details": "a mapping to index all REATData structs created in the contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "updateMasterUri(string)": {
        "notice": "a new token type is created for every single property"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 138,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1870,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_reatAutoId",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)1701_storage"
      },
      {
        "astId": 1887,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "reatdata",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(REATData)1881_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(REATData)1881_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MasterREAT_EG.REATData)",
        "numberOfBytes": "32",
        "value": "t_struct(REATData)1881_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1701_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1700,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(REATData)1881_storage": {
        "encoding": "inplace",
        "label": "struct MasterREAT_EG.REATData",
        "members": [
          {
            "astId": 1872,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "REATid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1874,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "idCatastro",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1876,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "hashJsonToken",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1878,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "hashJsonDoc",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1880,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
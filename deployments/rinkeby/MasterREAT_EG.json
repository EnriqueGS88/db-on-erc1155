{
  "address": "0x5e72f1f60242501B725C583a316e1d504C1c56ca",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_idCatastro",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_hashJsonToken",
          "type": "string"
        }
      ],
      "name": "addREAT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reatdata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "REATid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "idCatastro",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hashJsonToken",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hashJsonDoc",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newHashJsonDoc",
          "type": "string"
        }
      ],
      "name": "updateHashJsonDoc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "updateMasterUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0a8a85753ac72cafb3ebb29c0f4d3757c30a22b1d5fc5314e8d2fe44c04d353",
  "receipt": {
    "to": null,
    "from": "0x2B65cd345Ad3bf6dA7b497d67b3a8cFE7b9a3500",
    "contractAddress": "0x5e72f1f60242501B725C583a316e1d504C1c56ca",
    "transactionIndex": 21,
    "gasUsed": "3261338",
    "logsBloom": "0x
    "blockHash": "0xbcbf2b9058a071fd513d5f43d8374176e82f0e2aa8ac9fa8ff582aee0dfbb1ab",
    "transactionHash": "0xe0a8a85753ac72cafb3ebb29c0f4d3757c30a22b1d5fc5314e8d2fe44c04d353",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 10282703,
        "transactionHash": "0xe0a8a85753ac72cafb3ebb29c0f4d3757c30a22b1d5fc5314e8d2fe44c04d353",
        "address": "0x5e72f1f60242501B725C583a316e1d504C1c56ca",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002b65cd345ad3bf6da7b497d67b3a8cfe7b9a3500"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0xbcbf2b9058a071fd513d5f43d8374176e82f0e2aa8ac9fa8ff582aee0dfbb1ab"
      }
    ],
    "blockNumber": 10282703,
    "cumulativeGasUsed": "4315765",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "1f2c121a195fe970d8b10107222a9e44",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_idCatastro\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hashJsonToken\",\"type\":\"string\"}],\"name\":\"addREAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reatdata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"REATid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"idCatastro\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashJsonToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashJsonDoc\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newHashJsonDoc\",\"type\":\"string\"}],\"name\":\"updateHashJsonDoc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"updateMasterUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addREAT(string,string)\":{\"details\":\"addREAT() mints the token and updates the token counter\",\"params\":{\"_hashJsonToken\":\"is the keccak256 of the property metadata\",\"_idCatastro\":\"is the ID to be provided by the Catastro office\"},\"returns\":{\"_0\":\"ID of the struct REATdata that got created/updated\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getUri()\":{\"details\":\"Function to add the tokenId on the URI that's returned\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateHashJsonDoc(uint256,string)\":{\"details\":\"This function will update the json hash whenever there are updates in property docs\",\"params\":{\"_id\":\"used to search in the reatdata mapping to find the struct that will be updated\",\"_newHashJsonDoc\":\"is the new hash that will replace the hashJsonDoc inside the struct reatdata\"}},\"updateMasterUri(string)\":{\"details\":\"updateMasterUri() sets a new URI for the token type passed as argumentwhere is the OWNER defined ?\",\"params\":{\"uri_\":\"is the ID that will be set for the token type\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"reatdata\":{\"details\":\"a mapping to index all REATData structs created in the contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addREAT(string,string)\":{\"notice\":\"why are passing the parameters as calldata ?token minted with URI property \\\"hashJsonDoc\\\" empty. It'll be added later on\"},\"getUri()\":{\"notice\":\"it takes the base URI and concatenates the _tokenId and adds \\\".json\\\" in the end\"},\"updateMasterUri(string)\":{\"notice\":\"a new token type is created for every single property\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterREAT_EG.sol\":\"MasterREAT_EG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MasterREAT_EG.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract MasterREAT_EG is ERC1155, Ownable {\\r\\n    string baseUri = \\\"https://www.realestatechain.es/api/item/\\\";\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _reatAutoId;\\r\\n    // using Strings for Strings;\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev The Struct REATData stores all metadata for every token\\r\\n        * @param REATid acts as the tokenID in the standard ERC-1155\\r\\n        * @param idCatastr is the property id provided by the Catastro office\\r\\n        * @param hashJsonToken created by doing keccak256 on json of property metadata\\r\\n        * @param hashJsonDoc created by doing keccak256 on json of all docs submitted at Catastro office    \\r\\n     */\\r\\n    struct REATData {\\r\\n        uint256 REATid;\\r\\n        string idCatastro;\\r\\n        string hashJsonToken;\\r\\n        string hashJsonDoc;\\r\\n        bool exists;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * @dev a mapping to index all REATData structs created in the contract\\r\\n     */\\r\\n    mapping(uint256 => REATData) public reatdata;\\r\\n\\r\\n    constructor()\\r\\n        ERC1155(\\\"https://www.realestatechain.es/api/item/{id}.json\\\")\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n        * @dev updateMasterUri() sets a new URI for the token type passed as argument\\r\\n        * @dev where is the OWNER defined ?\\r\\n        * @param uri_ is the ID that will be set for the token type\\r\\n        * @notice a new token type is created for every single property\\r\\n     */\\r\\n    function updateMasterUri(string memory uri_) public onlyOwner {\\r\\n        _setURI(uri_);\\r\\n    }\\r\\n\\r\\n        // * @param _tokenId variable passed to assign the ID, that is the token type \\r\\n    \\r\\n    /**\\r\\n        * @dev Function to add the tokenId on the URI that's returned\\r\\n        * @notice it takes the base URI and concatenates the _tokenId and adds \\\".json\\\" in the end\\r\\n     */\\r\\n    function getUri() public view returns(string memory) {\\r\\n\\r\\n        return string(\\r\\n            abi.encode(\\r\\n                // baseUri,\\r\\n                // Strings.toString(_tokenId),\\r\\n                \\\"test\\\",\\r\\n                \\\".json\\\"\\r\\n            )\\r\\n        );\\r\\n    \\r\\n    }\\r\\n    \\r\\n    /**\\r\\n        * @dev addREAT() mints the token and updates the token counter\\r\\n        * @param _idCatastro is the ID to be provided by the Catastro office\\r\\n        * @param _hashJsonToken is the keccak256 of the property metadata\\r\\n        * @notice why are passing the parameters as calldata ?\\r\\n        * @notice token minted with URI property \\\"hashJsonDoc\\\" empty. It'll be added later on\\r\\n        * @return ID of the struct REATdata that got created/updated\\r\\n     */\\r\\n    function addREAT(\\r\\n        string calldata _idCatastro,\\r\\n        string calldata _hashJsonToken\\r\\n    ) public onlyOwner returns (uint256) {\\r\\n        _reatAutoId.increment();\\r\\n        uint256 newREATId = _reatAutoId.current();\\r\\n        _mint(msg.sender, newREATId, 1, \\\"\\\");\\r\\n\\r\\n        reatdata[newREATId] = REATData(\\r\\n            newREATId,\\r\\n            _idCatastro,\\r\\n            _hashJsonToken,\\r\\n            \\\"\\\",\\r\\n            true\\r\\n        );\\r\\n        return newREATId;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        * @dev This function will update the json hash whenever there are updates in property docs\\r\\n        * @param _id used to search in the reatdata mapping to find the struct that will be updated\\r\\n        * @param _newHashJsonDoc is the new hash that will replace the hashJsonDoc inside the struct reatdata\\r\\n     */\\r\\n    function updateHashJsonDoc(uint256 _id, string calldata _newHashJsonDoc)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(reatdata[_id].exists == true);\\r\\n        reatdata[_id].hashJsonDoc = _newHashJsonDoc;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5cdd6a8f8f68766468413e85562843e9f6cb7934fea36766520b78937e88f853\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080604052604051806060016040528060288152602001620039e260289139600490805190602001906200003592919062000180565b503480156200004357600080fd5b5060405180606001604052806031815260200162003a0a603191396200006f816200009660201b60201c565b506200009062000084620000b260201b60201c565b620000ba60201b60201c565b62000295565b8060029080519060200190620000ae92919062000180565b5050565b600033905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200018e906200025f565b90600052602060002090601f016020900481019282620001b25760008555620001fe565b82601f10620001cd57805160ff1916838001178555620001fe565b82800160010185558215620001fe579182015b82811115620001fd578251825591602001919060010190620001e0565b5b5090506200020d919062000211565b5090565b5b808211156200022c57600081600090555060010162000212565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200027857607f821691505b602082108114156200028f576200028e62000230565b5b50919050565b61373d80620002a56000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c8063715018a611610097578063acbe9dd611610066578063acbe9dd6146102ae578063e985e9c5146102de578063f242432a1461030e578063f2fde38b1461032a576100ff565b8063715018a61461024e5780638da5cb5b146102585780639dcbf87614610276578063a22cb46514610292576100ff565b80632eb2c2d6116100d35780632eb2c2d6146101b05780634e1273f4146101cc5780634e16fc8b146101fc5780635d9a8a451461021a576100ff565b8062fdd58e1461010457806301ffc9a7146101345780630e89341c1461016457806327786ae114610194575b600080fd5b61011e60048036038101906101199190612000565b610346565b60405161012b919061204f565b60405180910390f35b61014e600480360381019061014991906120c2565b61040f565b60405161015b919061210a565b60405180910390f35b61017e60048036038101906101799190612125565b6104f1565b60405161018b91906121eb565b60405180910390f35b6101ae60048036038101906101a99190612272565b610585565b005b6101ca60048036038101906101c591906124c5565b610660565b005b6101e660048036038101906101e19190612657565b610701565b6040516101f3919061278d565b60405180910390f35b61020461081a565b60405161021191906121eb565b60405180910390f35b610234600480360381019061022f9190612125565b61083f565b6040516102459594939291906127af565b60405180910390f35b610256610a1a565b005b610260610aa2565b60405161026d9190612826565b60405180910390f35b610290600480360381019061028b91906128e2565b610acc565b005b6102ac60048036038101906102a79190612957565b610b54565b005b6102c860048036038101906102c39190612997565b610b6a565b6040516102d5919061204f565b60405180910390f35b6102f860048036038101906102f39190612a18565b610d80565b604051610305919061210a565b60405180910390f35b61032860048036038101906103239190612a58565b610e14565b005b610344600480360381019061033f9190612aef565b610eb5565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ae90612b8e565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104da57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104ea57506104e982610fad565b5b9050919050565b60606002805461050090612bdd565b80601f016020809104026020016040519081016040528092919081815260200182805461052c90612bdd565b80156105795780601f1061054e57610100808354040283529160200191610579565b820191906000526020600020905b81548152906001019060200180831161055c57829003601f168201915b50505050509050919050565b61058d611017565b73ffffffffffffffffffffffffffffffffffffffff166105ab610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f890612c5b565b60405180910390fd5b600115156006600085815260200190815260200160002060040160009054906101000a900460ff1615151461063557600080fd5b818160066000868152602001908152602001600020600301919061065a929190611e2f565b50505050565b610668611017565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806106ae57506106ad856106a8611017565b610d80565b5b6106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e490612ced565b60405180910390fd5b6106fa858585858561101f565b5050505050565b60608151835114610747576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073e90612d7f565b60405180910390fd5b6000835167ffffffffffffffff811115610764576107636122d2565b5b6040519080825280602002602001820160405280156107925781602001602082028036833780820191505090505b50905060005b845181101561080f576107df8582815181106107b7576107b6612d9f565b5b60200260200101518583815181106107d2576107d1612d9f565b5b6020026020010151610346565b8282815181106107f2576107f1612d9f565b5b6020026020010181815250508061080890612dfd565b9050610798565b508091505092915050565b606060405160200161082b90612ede565b604051602081830303815290604052905090565b600660205280600052604060002060009150905080600001549080600101805461086890612bdd565b80601f016020809104026020016040519081016040528092919081815260200182805461089490612bdd565b80156108e15780601f106108b6576101008083540402835291602001916108e1565b820191906000526020600020905b8154815290600101906020018083116108c457829003601f168201915b5050505050908060020180546108f690612bdd565b80601f016020809104026020016040519081016040528092919081815260200182805461092290612bdd565b801561096f5780601f106109445761010080835404028352916020019161096f565b820191906000526020600020905b81548152906001019060200180831161095257829003601f168201915b50505050509080600301805461098490612bdd565b80601f01602080910402602001604051908101604052809291908181526020018280546109b090612bdd565b80156109fd5780601f106109d2576101008083540402835291602001916109fd565b820191906000526020600020905b8154815290600101906020018083116109e057829003601f168201915b5050505050908060040160009054906101000a900460ff16905085565b610a22611017565b73ffffffffffffffffffffffffffffffffffffffff16610a40610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610a96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8d90612c5b565b60405180910390fd5b610aa06000611333565b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ad4611017565b73ffffffffffffffffffffffffffffffffffffffff16610af2610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f90612c5b565b60405180910390fd5b610b51816113f9565b50565b610b66610b5f611017565b8383611413565b5050565b6000610b74611017565b73ffffffffffffffffffffffffffffffffffffffff16610b92610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610be8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdf90612c5b565b60405180910390fd5b610bf26005611580565b6000610bfe6005611596565b9050610c1c33826001604051806020016040528060008152506115a4565b6040518060a0016040528082815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016040518060200160405280600081525081526020016001151581525060066000838152602001908152602001600020600082015181600001556020820151816001019080519060200190610d16929190611eb5565b506040820151816002019080519060200190610d33929190611eb5565b506060820151816003019080519060200190610d50929190611eb5565b5060808201518160040160006101000a81548160ff02191690831515021790555090505080915050949350505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610e1c611017565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610e625750610e6185610e5c611017565b610d80565b5b610ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9890612f83565b60405180910390fd5b610eae858585858561173a565b5050505050565b610ebd611017565b73ffffffffffffffffffffffffffffffffffffffff16610edb610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2890612c5b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9890613015565b60405180910390fd5b610faa81611333565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114611063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105a906130a7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156110d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ca90613139565b60405180910390fd5b60006110dd611017565b90506110ed8187878787876119bc565b60005b845181101561129e57600085828151811061110e5761110d612d9f565b5b60200260200101519050600085838151811061112d5761112c612d9f565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156111ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c5906131cb565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461128391906131eb565b925050819055505050508061129790612dfd565b90506110f0565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611315929190613241565b60405180910390a461132b8187878787876119c4565b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806002908051906020019061140f929190611eb5565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611482576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611479906132ea565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611573919061210a565b60405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160b9061337c565b60405180910390fd5b600061161e611017565b905061163f8160008761163088611bab565b61163988611bab565b876119bc565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461169e91906131eb565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161171c92919061339c565b60405180910390a461173381600087878787611c25565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156117aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a190613139565b60405180910390fd5b60006117b4611017565b90506117d48187876117c588611bab565b6117ce88611bab565b876119bc565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561186b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611862906131cb565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461192091906131eb565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161199d92919061339c565b60405180910390a46119b3828888888888611c25565b50505050505050565b505050505050565b6119e38473ffffffffffffffffffffffffffffffffffffffff16611e0c565b15611ba3578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611a2995949392919061341a565b602060405180830381600087803b158015611a4357600080fd5b505af1925050508015611a7457506040513d601f19601f82011682018060405250810190611a719190613497565b60015b611b1a57611a806134d1565b806308c379a01415611add5750611a956134f3565b80611aa05750611adf565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad491906121eb565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b11906135fb565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b989061368d565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611bca57611bc96122d2565b5b604051908082528060200260200182016040528015611bf85781602001602082028036833780820191505090505b5090508281600081518110611c1057611c0f612d9f565b5b60200260200101818152505080915050919050565b611c448473ffffffffffffffffffffffffffffffffffffffff16611e0c565b15611e04578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611c8a9594939291906136ad565b602060405180830381600087803b158015611ca457600080fd5b505af1925050508015611cd557506040513d601f19601f82011682018060405250810190611cd29190613497565b60015b611d7b57611ce16134d1565b806308c379a01415611d3e5750611cf66134f3565b80611d015750611d40565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3591906121eb565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d72906135fb565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df99061368d565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611e3b90612bdd565b90600052602060002090601f016020900481019282611e5d5760008555611ea4565b82601f10611e7657803560ff1916838001178555611ea4565b82800160010185558215611ea4579182015b82811115611ea3578235825591602001919060010190611e88565b5b509050611eb19190611f3b565b5090565b828054611ec190612bdd565b90600052602060002090601f016020900481019282611ee35760008555611f2a565b82601f10611efc57805160ff1916838001178555611f2a565b82800160010185558215611f2a579182015b82811115611f29578251825591602001919060010190611f0e565b5b509050611f379190611f3b565b5090565b5b80821115611f54576000816000905550600101611f3c565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f9782611f6c565b9050919050565b611fa781611f8c565b8114611fb257600080fd5b50565b600081359050611fc481611f9e565b92915050565b6000819050919050565b611fdd81611fca565b8114611fe857600080fd5b50565b600081359050611ffa81611fd4565b92915050565b6000806040838503121561201757612016611f62565b5b600061202585828601611fb5565b925050602061203685828601611feb565b9150509250929050565b61204981611fca565b82525050565b60006020820190506120646000830184612040565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61209f8161206a565b81146120aa57600080fd5b50565b6000813590506120bc81612096565b92915050565b6000602082840312156120d8576120d7611f62565b5b60006120e6848285016120ad565b91505092915050565b60008115159050919050565b612104816120ef565b82525050565b600060208201905061211f60008301846120fb565b92915050565b60006020828403121561213b5761213a611f62565b5b600061214984828501611feb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561218c578082015181840152602081019050612171565b8381111561219b576000848401525b50505050565b6000601f19601f8301169050919050565b60006121bd82612152565b6121c7818561215d565b93506121d781856020860161216e565b6121e0816121a1565b840191505092915050565b6000602082019050818103600083015261220581846121b2565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126122325761223161220d565b5b8235905067ffffffffffffffff81111561224f5761224e612212565b5b60208301915083600182028301111561226b5761226a612217565b5b9250929050565b60008060006040848603121561228b5761228a611f62565b5b600061229986828701611feb565b935050602084013567ffffffffffffffff8111156122ba576122b9611f67565b5b6122c68682870161221c565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61230a826121a1565b810181811067ffffffffffffffff82111715612329576123286122d2565b5b80604052505050565b600061233c611f58565b90506123488282612301565b919050565b600067ffffffffffffffff821115612368576123676122d2565b5b602082029050602081019050919050565b600061238c6123878461234d565b612332565b905080838252602082019050602084028301858111156123af576123ae612217565b5b835b818110156123d857806123c48882611feb565b8452602084019350506020810190506123b1565b5050509392505050565b600082601f8301126123f7576123f661220d565b5b8135612407848260208601612379565b91505092915050565b600080fd5b600067ffffffffffffffff8211156124305761242f6122d2565b5b612439826121a1565b9050602081019050919050565b82818337600083830152505050565b600061246861246384612415565b612332565b90508281526020810184848401111561248457612483612410565b5b61248f848285612446565b509392505050565b600082601f8301126124ac576124ab61220d565b5b81356124bc848260208601612455565b91505092915050565b600080600080600060a086880312156124e1576124e0611f62565b5b60006124ef88828901611fb5565b955050602061250088828901611fb5565b945050604086013567ffffffffffffffff81111561252157612520611f67565b5b61252d888289016123e2565b935050606086013567ffffffffffffffff81111561254e5761254d611f67565b5b61255a888289016123e2565b925050608086013567ffffffffffffffff81111561257b5761257a611f67565b5b61258788828901612497565b9150509295509295909350565b600067ffffffffffffffff8211156125af576125ae6122d2565b5b602082029050602081019050919050565b60006125d36125ce84612594565b612332565b905080838252602082019050602084028301858111156125f6576125f5612217565b5b835b8181101561261f578061260b8882611fb5565b8452602084019350506020810190506125f8565b5050509392505050565b600082601f83011261263e5761263d61220d565b5b813561264e8482602086016125c0565b91505092915050565b6000806040838503121561266e5761266d611f62565b5b600083013567ffffffffffffffff81111561268c5761268b611f67565b5b61269885828601612629565b925050602083013567ffffffffffffffff8111156126b9576126b8611f67565b5b6126c5858286016123e2565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61270481611fca565b82525050565b600061271683836126fb565b60208301905092915050565b6000602082019050919050565b600061273a826126cf565b61274481856126da565b935061274f836126eb565b8060005b83811015612780578151612767888261270a565b975061277283612722565b925050600181019050612753565b5085935050505092915050565b600060208201905081810360008301526127a7818461272f565b905092915050565b600060a0820190506127c46000830188612040565b81810360208301526127d681876121b2565b905081810360408301526127ea81866121b2565b905081810360608301526127fe81856121b2565b905061280d60808301846120fb565b9695505050505050565b61282081611f8c565b82525050565b600060208201905061283b6000830184612817565b92915050565b600067ffffffffffffffff82111561285c5761285b6122d2565b5b612865826121a1565b9050602081019050919050565b600061288561288084612841565b612332565b9050828152602081018484840111156128a1576128a0612410565b5b6128ac848285612446565b509392505050565b600082601f8301126128c9576128c861220d565b5b81356128d9848260208601612872565b91505092915050565b6000602082840312156128f8576128f7611f62565b5b600082013567ffffffffffffffff81111561291657612915611f67565b5b612922848285016128b4565b91505092915050565b612934816120ef565b811461293f57600080fd5b50565b6000813590506129518161292b565b92915050565b6000806040838503121561296e5761296d611f62565b5b600061297c85828601611fb5565b925050602061298d85828601612942565b9150509250929050565b600080600080604085870312156129b1576129b0611f62565b5b600085013567ffffffffffffffff8111156129cf576129ce611f67565b5b6129db8782880161221c565b9450945050602085013567ffffffffffffffff8111156129fe576129fd611f67565b5b612a0a8782880161221c565b925092505092959194509250565b60008060408385031215612a2f57612a2e611f62565b5b6000612a3d85828601611fb5565b9250506020612a4e85828601611fb5565b9150509250929050565b600080600080600060a08688031215612a7457612a73611f62565b5b6000612a8288828901611fb5565b9550506020612a9388828901611fb5565b9450506040612aa488828901611feb565b9350506060612ab588828901611feb565b925050608086013567ffffffffffffffff811115612ad657612ad5611f67565b5b612ae288828901612497565b9150509295509295909350565b600060208284031215612b0557612b04611f62565b5b6000612b1384828501611fb5565b91505092915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000612b78602b8361215d565b9150612b8382612b1c565b604082019050919050565b60006020820190508181036000830152612ba781612b6b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612bf557607f821691505b60208210811415612c0957612c08612bae565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612c4560208361215d565b9150612c5082612c0f565b602082019050919050565b60006020820190508181036000830152612c7481612c38565b9050919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000612cd760328361215d565b9150612ce282612c7b565b604082019050919050565b60006020820190508181036000830152612d0681612cca565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612d6960298361215d565b9150612d7482612d0d565b604082019050919050565b60006020820190508181036000830152612d9881612d5c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e0882611fca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e3b57612e3a612dce565b5b600182019050919050565b7f7465737400000000000000000000000000000000000000000000000000000000600082015250565b6000612e7c60048361215d565b9150612e8782612e46565b602082019050919050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000612ec860058361215d565b9150612ed382612e92565b602082019050919050565b60006040820190508181036000830152612ef781612e6f565b90508181036020830152612f0a81612ebb565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000612f6d60298361215d565b9150612f7882612f11565b604082019050919050565b60006020820190508181036000830152612f9c81612f60565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612fff60268361215d565b915061300a82612fa3565b604082019050919050565b6000602082019050818103600083015261302e81612ff2565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061309160288361215d565b915061309c82613035565b604082019050919050565b600060208201905081810360008301526130c081613084565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061312360258361215d565b915061312e826130c7565b604082019050919050565b6000602082019050818103600083015261315281613116565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006131b5602a8361215d565b91506131c082613159565b604082019050919050565b600060208201905081810360008301526131e4816131a8565b9050919050565b60006131f682611fca565b915061320183611fca565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561323657613235612dce565b5b828201905092915050565b6000604082019050818103600083015261325b818561272f565b9050818103602083015261326f818461272f565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006132d460298361215d565b91506132df82613278565b604082019050919050565b60006020820190508181036000830152613303816132c7565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061336660218361215d565b91506133718261330a565b604082019050919050565b6000602082019050818103600083015261339581613359565b9050919050565b60006040820190506133b16000830185612040565b6133be6020830184612040565b9392505050565b600081519050919050565b600082825260208201905092915050565b60006133ec826133c5565b6133f681856133d0565b935061340681856020860161216e565b61340f816121a1565b840191505092915050565b600060a08201905061342f6000830188612817565b61343c6020830187612817565b818103604083015261344e818661272f565b90508181036060830152613462818561272f565b9050818103608083015261347681846133e1565b90509695505050505050565b60008151905061349181612096565b92915050565b6000602082840312156134ad576134ac611f62565b5b60006134bb84828501613482565b91505092915050565b60008160e01c9050919050565b600060033d11156134f05760046000803e6134ed6000516134c4565b90505b90565b600060443d101561350357613586565b61350b611f58565b60043d036004823e80513d602482011167ffffffffffffffff82111715613533575050613586565b808201805167ffffffffffffffff8111156135515750505050613586565b80602083010160043d03850181111561356e575050505050613586565b61357d82602001850186612301565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006135e560348361215d565b91506135f082613589565b604082019050919050565b60006020820190508181036000830152613614816135d8565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061367760288361215d565b91506136828261361b565b604082019050919050565b600060208201905081810360008301526136a68161366a565b9050919050565b600060a0820190506136c26000830188612817565b6136cf6020830187612817565b6136dc6040830186612040565b6136e96060830185612040565b81810360808301526136fb81846133e1565b9050969550505050505056fea26469706673582212206791b728229dfd5733aa2016edaace85a63378e3809878e61d42d8938d7d9e2a64736f6c6343000809003368747470733a2f2f7777772e7265616c657374617465636861696e2e65732f6170692f6974656d2f68747470733a2f2f7777772e7265616c657374617465636861696e2e65732f6170692f6974656d2f7b69647d2e6a736f6e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c8063715018a611610097578063acbe9dd611610066578063acbe9dd6146102ae578063e985e9c5146102de578063f242432a1461030e578063f2fde38b1461032a576100ff565b8063715018a61461024e5780638da5cb5b146102585780639dcbf87614610276578063a22cb46514610292576100ff565b80632eb2c2d6116100d35780632eb2c2d6146101b05780634e1273f4146101cc5780634e16fc8b146101fc5780635d9a8a451461021a576100ff565b8062fdd58e1461010457806301ffc9a7146101345780630e89341c1461016457806327786ae114610194575b600080fd5b61011e60048036038101906101199190612000565b610346565b60405161012b919061204f565b60405180910390f35b61014e600480360381019061014991906120c2565b61040f565b60405161015b919061210a565b60405180910390f35b61017e60048036038101906101799190612125565b6104f1565b60405161018b91906121eb565b60405180910390f35b6101ae60048036038101906101a99190612272565b610585565b005b6101ca60048036038101906101c591906124c5565b610660565b005b6101e660048036038101906101e19190612657565b610701565b6040516101f3919061278d565b60405180910390f35b61020461081a565b60405161021191906121eb565b60405180910390f35b610234600480360381019061022f9190612125565b61083f565b6040516102459594939291906127af565b60405180910390f35b610256610a1a565b005b610260610aa2565b60405161026d9190612826565b60405180910390f35b610290600480360381019061028b91906128e2565b610acc565b005b6102ac60048036038101906102a79190612957565b610b54565b005b6102c860048036038101906102c39190612997565b610b6a565b6040516102d5919061204f565b60405180910390f35b6102f860048036038101906102f39190612a18565b610d80565b604051610305919061210a565b60405180910390f35b61032860048036038101906103239190612a58565b610e14565b005b610344600480360381019061033f9190612aef565b610eb5565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ae90612b8e565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104da57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104ea57506104e982610fad565b5b9050919050565b60606002805461050090612bdd565b80601f016020809104026020016040519081016040528092919081815260200182805461052c90612bdd565b80156105795780601f1061054e57610100808354040283529160200191610579565b820191906000526020600020905b81548152906001019060200180831161055c57829003601f168201915b50505050509050919050565b61058d611017565b73ffffffffffffffffffffffffffffffffffffffff166105ab610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f890612c5b565b60405180910390fd5b600115156006600085815260200190815260200160002060040160009054906101000a900460ff1615151461063557600080fd5b818160066000868152602001908152602001600020600301919061065a929190611e2f565b50505050565b610668611017565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806106ae57506106ad856106a8611017565b610d80565b5b6106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e490612ced565b60405180910390fd5b6106fa858585858561101f565b5050505050565b60608151835114610747576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073e90612d7f565b60405180910390fd5b6000835167ffffffffffffffff811115610764576107636122d2565b5b6040519080825280602002602001820160405280156107925781602001602082028036833780820191505090505b50905060005b845181101561080f576107df8582815181106107b7576107b6612d9f565b5b60200260200101518583815181106107d2576107d1612d9f565b5b6020026020010151610346565b8282815181106107f2576107f1612d9f565b5b6020026020010181815250508061080890612dfd565b9050610798565b508091505092915050565b606060405160200161082b90612ede565b604051602081830303815290604052905090565b600660205280600052604060002060009150905080600001549080600101805461086890612bdd565b80601f016020809104026020016040519081016040528092919081815260200182805461089490612bdd565b80156108e15780601f106108b6576101008083540402835291602001916108e1565b820191906000526020600020905b8154815290600101906020018083116108c457829003601f168201915b5050505050908060020180546108f690612bdd565b80601f016020809104026020016040519081016040528092919081815260200182805461092290612bdd565b801561096f5780601f106109445761010080835404028352916020019161096f565b820191906000526020600020905b81548152906001019060200180831161095257829003601f168201915b50505050509080600301805461098490612bdd565b80601f01602080910402602001604051908101604052809291908181526020018280546109b090612bdd565b80156109fd5780601f106109d2576101008083540402835291602001916109fd565b820191906000526020600020905b8154815290600101906020018083116109e057829003601f168201915b5050505050908060040160009054906101000a900460ff16905085565b610a22611017565b73ffffffffffffffffffffffffffffffffffffffff16610a40610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610a96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8d90612c5b565b60405180910390fd5b610aa06000611333565b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610ad4611017565b73ffffffffffffffffffffffffffffffffffffffff16610af2610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3f90612c5b565b60405180910390fd5b610b51816113f9565b50565b610b66610b5f611017565b8383611413565b5050565b6000610b74611017565b73ffffffffffffffffffffffffffffffffffffffff16610b92610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610be8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdf90612c5b565b60405180910390fd5b610bf26005611580565b6000610bfe6005611596565b9050610c1c33826001604051806020016040528060008152506115a4565b6040518060a0016040528082815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020016040518060200160405280600081525081526020016001151581525060066000838152602001908152602001600020600082015181600001556020820151816001019080519060200190610d16929190611eb5565b506040820151816002019080519060200190610d33929190611eb5565b506060820151816003019080519060200190610d50929190611eb5565b5060808201518160040160006101000a81548160ff02191690831515021790555090505080915050949350505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610e1c611017565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610e625750610e6185610e5c611017565b610d80565b5b610ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9890612f83565b60405180910390fd5b610eae858585858561173a565b5050505050565b610ebd611017565b73ffffffffffffffffffffffffffffffffffffffff16610edb610aa2565b73ffffffffffffffffffffffffffffffffffffffff1614610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2890612c5b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9890613015565b60405180910390fd5b610faa81611333565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114611063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105a906130a7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156110d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ca90613139565b60405180910390fd5b60006110dd611017565b90506110ed8187878787876119bc565b60005b845181101561129e57600085828151811061110e5761110d612d9f565b5b60200260200101519050600085838151811061112d5761112c612d9f565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156111ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c5906131cb565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461128391906131eb565b925050819055505050508061129790612dfd565b90506110f0565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611315929190613241565b60405180910390a461132b8187878787876119c4565b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b806002908051906020019061140f929190611eb5565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611482576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611479906132ea565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611573919061210a565b60405180910390a3505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160b9061337c565b60405180910390fd5b600061161e611017565b905061163f8160008761163088611bab565b61163988611bab565b876119bc565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461169e91906131eb565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161171c92919061339c565b60405180910390a461173381600087878787611c25565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156117aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a190613139565b60405180910390fd5b60006117b4611017565b90506117d48187876117c588611bab565b6117ce88611bab565b876119bc565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561186b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611862906131cb565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461192091906131eb565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161199d92919061339c565b60405180910390a46119b3828888888888611c25565b50505050505050565b505050505050565b6119e38473ffffffffffffffffffffffffffffffffffffffff16611e0c565b15611ba3578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611a2995949392919061341a565b602060405180830381600087803b158015611a4357600080fd5b505af1925050508015611a7457506040513d601f19601f82011682018060405250810190611a719190613497565b60015b611b1a57611a806134d1565b806308c379a01415611add5750611a956134f3565b80611aa05750611adf565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad491906121eb565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b11906135fb565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b989061368d565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611bca57611bc96122d2565b5b604051908082528060200260200182016040528015611bf85781602001602082028036833780820191505090505b5090508281600081518110611c1057611c0f612d9f565b5b60200260200101818152505080915050919050565b611c448473ffffffffffffffffffffffffffffffffffffffff16611e0c565b15611e04578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611c8a9594939291906136ad565b602060405180830381600087803b158015611ca457600080fd5b505af1925050508015611cd557506040513d601f19601f82011682018060405250810190611cd29190613497565b60015b611d7b57611ce16134d1565b806308c379a01415611d3e5750611cf66134f3565b80611d015750611d40565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3591906121eb565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d72906135fb565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df99061368d565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611e3b90612bdd565b90600052602060002090601f016020900481019282611e5d5760008555611ea4565b82601f10611e7657803560ff1916838001178555611ea4565b82800160010185558215611ea4579182015b82811115611ea3578235825591602001919060010190611e88565b5b509050611eb19190611f3b565b5090565b828054611ec190612bdd565b90600052602060002090601f016020900481019282611ee35760008555611f2a565b82601f10611efc57805160ff1916838001178555611f2a565b82800160010185558215611f2a579182015b82811115611f29578251825591602001919060010190611f0e565b5b509050611f379190611f3b565b5090565b5b80821115611f54576000816000905550600101611f3c565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f9782611f6c565b9050919050565b611fa781611f8c565b8114611fb257600080fd5b50565b600081359050611fc481611f9e565b92915050565b6000819050919050565b611fdd81611fca565b8114611fe857600080fd5b50565b600081359050611ffa81611fd4565b92915050565b6000806040838503121561201757612016611f62565b5b600061202585828601611fb5565b925050602061203685828601611feb565b9150509250929050565b61204981611fca565b82525050565b60006020820190506120646000830184612040565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61209f8161206a565b81146120aa57600080fd5b50565b6000813590506120bc81612096565b92915050565b6000602082840312156120d8576120d7611f62565b5b60006120e6848285016120ad565b91505092915050565b60008115159050919050565b612104816120ef565b82525050565b600060208201905061211f60008301846120fb565b92915050565b60006020828403121561213b5761213a611f62565b5b600061214984828501611feb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561218c578082015181840152602081019050612171565b8381111561219b576000848401525b50505050565b6000601f19601f8301169050919050565b60006121bd82612152565b6121c7818561215d565b93506121d781856020860161216e565b6121e0816121a1565b840191505092915050565b6000602082019050818103600083015261220581846121b2565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126122325761223161220d565b5b8235905067ffffffffffffffff81111561224f5761224e612212565b5b60208301915083600182028301111561226b5761226a612217565b5b9250929050565b60008060006040848603121561228b5761228a611f62565b5b600061229986828701611feb565b935050602084013567ffffffffffffffff8111156122ba576122b9611f67565b5b6122c68682870161221c565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61230a826121a1565b810181811067ffffffffffffffff82111715612329576123286122d2565b5b80604052505050565b600061233c611f58565b90506123488282612301565b919050565b600067ffffffffffffffff821115612368576123676122d2565b5b602082029050602081019050919050565b600061238c6123878461234d565b612332565b905080838252602082019050602084028301858111156123af576123ae612217565b5b835b818110156123d857806123c48882611feb565b8452602084019350506020810190506123b1565b5050509392505050565b600082601f8301126123f7576123f661220d565b5b8135612407848260208601612379565b91505092915050565b600080fd5b600067ffffffffffffffff8211156124305761242f6122d2565b5b612439826121a1565b9050602081019050919050565b82818337600083830152505050565b600061246861246384612415565b612332565b90508281526020810184848401111561248457612483612410565b5b61248f848285612446565b509392505050565b600082601f8301126124ac576124ab61220d565b5b81356124bc848260208601612455565b91505092915050565b600080600080600060a086880312156124e1576124e0611f62565b5b60006124ef88828901611fb5565b955050602061250088828901611fb5565b945050604086013567ffffffffffffffff81111561252157612520611f67565b5b61252d888289016123e2565b935050606086013567ffffffffffffffff81111561254e5761254d611f67565b5b61255a888289016123e2565b925050608086013567ffffffffffffffff81111561257b5761257a611f67565b5b61258788828901612497565b9150509295509295909350565b600067ffffffffffffffff8211156125af576125ae6122d2565b5b602082029050602081019050919050565b60006125d36125ce84612594565b612332565b905080838252602082019050602084028301858111156125f6576125f5612217565b5b835b8181101561261f578061260b8882611fb5565b8452602084019350506020810190506125f8565b5050509392505050565b600082601f83011261263e5761263d61220d565b5b813561264e8482602086016125c0565b91505092915050565b6000806040838503121561266e5761266d611f62565b5b600083013567ffffffffffffffff81111561268c5761268b611f67565b5b61269885828601612629565b925050602083013567ffffffffffffffff8111156126b9576126b8611f67565b5b6126c5858286016123e2565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61270481611fca565b82525050565b600061271683836126fb565b60208301905092915050565b6000602082019050919050565b600061273a826126cf565b61274481856126da565b935061274f836126eb565b8060005b83811015612780578151612767888261270a565b975061277283612722565b925050600181019050612753565b5085935050505092915050565b600060208201905081810360008301526127a7818461272f565b905092915050565b600060a0820190506127c46000830188612040565b81810360208301526127d681876121b2565b905081810360408301526127ea81866121b2565b905081810360608301526127fe81856121b2565b905061280d60808301846120fb565b9695505050505050565b61282081611f8c565b82525050565b600060208201905061283b6000830184612817565b92915050565b600067ffffffffffffffff82111561285c5761285b6122d2565b5b612865826121a1565b9050602081019050919050565b600061288561288084612841565b612332565b9050828152602081018484840111156128a1576128a0612410565b5b6128ac848285612446565b509392505050565b600082601f8301126128c9576128c861220d565b5b81356128d9848260208601612872565b91505092915050565b6000602082840312156128f8576128f7611f62565b5b600082013567ffffffffffffffff81111561291657612915611f67565b5b612922848285016128b4565b91505092915050565b612934816120ef565b811461293f57600080fd5b50565b6000813590506129518161292b565b92915050565b6000806040838503121561296e5761296d611f62565b5b600061297c85828601611fb5565b925050602061298d85828601612942565b9150509250929050565b600080600080604085870312156129b1576129b0611f62565b5b600085013567ffffffffffffffff8111156129cf576129ce611f67565b5b6129db8782880161221c565b9450945050602085013567ffffffffffffffff8111156129fe576129fd611f67565b5b612a0a8782880161221c565b925092505092959194509250565b60008060408385031215612a2f57612a2e611f62565b5b6000612a3d85828601611fb5565b9250506020612a4e85828601611fb5565b9150509250929050565b600080600080600060a08688031215612a7457612a73611f62565b5b6000612a8288828901611fb5565b9550506020612a9388828901611fb5565b9450506040612aa488828901611feb565b9350506060612ab588828901611feb565b925050608086013567ffffffffffffffff811115612ad657612ad5611f67565b5b612ae288828901612497565b9150509295509295909350565b600060208284031215612b0557612b04611f62565b5b6000612b1384828501611fb5565b91505092915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000612b78602b8361215d565b9150612b8382612b1c565b604082019050919050565b60006020820190508181036000830152612ba781612b6b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612bf557607f821691505b60208210811415612c0957612c08612bae565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612c4560208361215d565b9150612c5082612c0f565b602082019050919050565b60006020820190508181036000830152612c7481612c38565b9050919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000612cd760328361215d565b9150612ce282612c7b565b604082019050919050565b60006020820190508181036000830152612d0681612cca565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612d6960298361215d565b9150612d7482612d0d565b604082019050919050565b60006020820190508181036000830152612d9881612d5c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e0882611fca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612e3b57612e3a612dce565b5b600182019050919050565b7f7465737400000000000000000000000000000000000000000000000000000000600082015250565b6000612e7c60048361215d565b9150612e8782612e46565b602082019050919050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b6000612ec860058361215d565b9150612ed382612e92565b602082019050919050565b60006040820190508181036000830152612ef781612e6f565b90508181036020830152612f0a81612ebb565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000612f6d60298361215d565b9150612f7882612f11565b604082019050919050565b60006020820190508181036000830152612f9c81612f60565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612fff60268361215d565b915061300a82612fa3565b604082019050919050565b6000602082019050818103600083015261302e81612ff2565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061309160288361215d565b915061309c82613035565b604082019050919050565b600060208201905081810360008301526130c081613084565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061312360258361215d565b915061312e826130c7565b604082019050919050565b6000602082019050818103600083015261315281613116565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006131b5602a8361215d565b91506131c082613159565b604082019050919050565b600060208201905081810360008301526131e4816131a8565b9050919050565b60006131f682611fca565b915061320183611fca565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561323657613235612dce565b5b828201905092915050565b6000604082019050818103600083015261325b818561272f565b9050818103602083015261326f818461272f565b90509392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006132d460298361215d565b91506132df82613278565b604082019050919050565b60006020820190508181036000830152613303816132c7565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061336660218361215d565b91506133718261330a565b604082019050919050565b6000602082019050818103600083015261339581613359565b9050919050565b60006040820190506133b16000830185612040565b6133be6020830184612040565b9392505050565b600081519050919050565b600082825260208201905092915050565b60006133ec826133c5565b6133f681856133d0565b935061340681856020860161216e565b61340f816121a1565b840191505092915050565b600060a08201905061342f6000830188612817565b61343c6020830187612817565b818103604083015261344e818661272f565b90508181036060830152613462818561272f565b9050818103608083015261347681846133e1565b90509695505050505050565b60008151905061349181612096565b92915050565b6000602082840312156134ad576134ac611f62565b5b60006134bb84828501613482565b91505092915050565b60008160e01c9050919050565b600060033d11156134f05760046000803e6134ed6000516134c4565b90505b90565b600060443d101561350357613586565b61350b611f58565b60043d036004823e80513d602482011167ffffffffffffffff82111715613533575050613586565b808201805167ffffffffffffffff8111156135515750505050613586565b80602083010160043d03850181111561356e575050505050613586565b61357d82602001850186612301565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006135e560348361215d565b91506135f082613589565b604082019050919050565b60006020820190508181036000830152613614816135d8565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b600061367760288361215d565b91506136828261361b565b604082019050919050565b600060208201905081810360008301526136a68161366a565b9050919050565b600060a0820190506136c26000830188612817565b6136cf6020830187612817565b6136dc6040830186612040565b6136e96060830185612040565b81810360808301526136fb81846133e1565b9050969550505050505056fea26469706673582212206791b728229dfd5733aa2016edaace85a63378e3809878e61d42d8938d7d9e2a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addREAT(string,string)": {
        "details": "addREAT() mints the token and updates the token counter",
        "params": {
          "_hashJsonToken": "is the keccak256 of the property metadata",
          "_idCatastro": "is the ID to be provided by the Catastro office"
        },
        "returns": {
          "_0": "ID of the struct REATdata that got created/updated"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getUri()": {
        "details": "Function to add the tokenId on the URI that's returned"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateHashJsonDoc(uint256,string)": {
        "details": "This function will update the json hash whenever there are updates in property docs",
        "params": {
          "_id": "used to search in the reatdata mapping to find the struct that will be updated",
          "_newHashJsonDoc": "is the new hash that will replace the hashJsonDoc inside the struct reatdata"
        }
      },
      "updateMasterUri(string)": {
        "details": "updateMasterUri() sets a new URI for the token type passed as argumentwhere is the OWNER defined ?",
        "params": {
          "uri_": "is the ID that will be set for the token type"
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "reatdata": {
        "details": "a mapping to index all REATData structs created in the contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addREAT(string,string)": {
        "notice": "why are passing the parameters as calldata ?token minted with URI property \"hashJsonDoc\" empty. It'll be added later on"
      },
      "getUri()": {
        "notice": "it takes the base URI and concatenates the _tokenId and adds \".json\" in the end"
      },
      "updateMasterUri(string)": {
        "notice": "a new token type is created for every single property"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 138,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2021,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "baseUri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2028,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "_reatAutoId",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)1701_storage"
      },
      {
        "astId": 2045,
        "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
        "label": "reatdata",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(REATData)2039_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(REATData)2039_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MasterREAT_EG.REATData)",
        "numberOfBytes": "32",
        "value": "t_struct(REATData)2039_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1701_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1700,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(REATData)2039_storage": {
        "encoding": "inplace",
        "label": "struct MasterREAT_EG.REATData",
        "members": [
          {
            "astId": 2030,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "REATid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2032,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "idCatastro",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2034,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "hashJsonToken",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2036,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "hashJsonDoc",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2038,
            "contract": "contracts/MasterREAT_EG.sol:MasterREAT_EG",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}